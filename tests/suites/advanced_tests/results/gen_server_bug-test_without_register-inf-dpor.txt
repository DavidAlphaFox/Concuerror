Concuerror 0.17 (a62e2f6) started at 09 Aug 2017 12:45:36
 Options:
  [{after_timeout,infinity},
   {assertions_only,false},
   {assume_racing,false},
   {depth_bound,500},
   {disable_sleep_sets,false},
   {dpor,optimal},
   {entry_point,{gen_server_bug,test_without_register,[]}},
   {files,["/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"]},
   {ignore_error,[]},
   {instant_delivery,false},
   {interleaving_bound,infinity},
   {keep_going,true},
   {non_racing_system,[]},
   {print_depth,20},
   {quiet,true},
   {scheduling,round_robin},
   {scheduling_bound_type,none},
   {show_races,false},
   {strict_scheduling,false},
   {symbolic_names,true},
   {timeout,infinity},
   {treat_as_normal,[]},
   {use_receive_patterns,false}]
################################################################################
Interleaving #1
--------------------------------------------------------------------------------
Errors found:
* At step 12 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,206}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 16 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2854
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
   8: P: #Ref<0.4036243827.1754267649.127304> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}, [noconnect])
    in gen.erl line 167
  10: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  11: P: true = erlang:demonitor(#Ref<0.4036243827.1754267649.127304>, [flush])
    in gen.erl line 179
  12: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  13: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  14: Message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}) from P reaches P.1
  15: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
  16: P.1: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  17: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  18: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P.1 reaches P
################################################################################
Interleaving #2
--------------------------------------------------------------------------------
Errors found:
* At step 12 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,206}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2854
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
   8: P: #Ref<0.4036243827.1754267649.127304> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}, [noconnect])
    in gen.erl line 167
  10: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  11: P: true = erlang:demonitor(#Ref<0.4036243827.1754267649.127304>, [flush])
    in gen.erl line 179
  12: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  13: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  14: Message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop})
    in gen_server.erl line 381
  16: P.1: {#Ref<0.4036243827.1754267649.127304>,ok} = P ! {#Ref<0.4036243827.1754267649.127304>,ok}
    in gen_server.erl line 243
  17: P.1: exits normally
  18: P.1: true = erlang:exit(P, normal)
    (while exiting)
  19: Message ({#Ref<0.4036243827.1754267649.127304>,ok}) from P.1 reaches P
  20: Exit signal (normal) from P.1 reaches P
  21: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
################################################################################
Interleaving #3
--------------------------------------------------------------------------------
Errors found:
* At step 12 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,206}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 19 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2854
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
   8: P: #Ref<0.4036243827.1754267649.127304> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}, [noconnect])
    in gen.erl line 167
  10: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  11: P: true = erlang:demonitor(#Ref<0.4036243827.1754267649.127304>, [flush])
    in gen.erl line 179
  12: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  13: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  14: Message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop})
    in gen_server.erl line 381
  16: P.1: {#Ref<0.4036243827.1754267649.127304>,ok} = P ! {#Ref<0.4036243827.1754267649.127304>,ok}
    in gen_server.erl line 243
  17: Message ({#Ref<0.4036243827.1754267649.127304>,ok}) from P.1 reaches P
  18: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
  19: P.1: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  20: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  21: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P.1 reaches P
################################################################################
Interleaving #4
--------------------------------------------------------------------------------
Errors found:
* At step 12 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,206}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 17 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2854
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
   8: P: #Ref<0.4036243827.1754267649.127304> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}, [noconnect])
    in gen.erl line 167
  10: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  11: P: true = erlang:demonitor(#Ref<0.4036243827.1754267649.127304>, [flush])
    in gen.erl line 179
  12: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  13: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  14: Message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop})
    in gen_server.erl line 381
  16: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
  17: P.1: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  18: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  19: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P.1 reaches P
################################################################################
Interleaving #5
--------------------------------------------------------------------------------
Errors found:
* At step 21 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,206}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2854
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
   8: P: #Ref<0.4036243827.1754267649.127304> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}, [noconnect])
    in gen.erl line 167
  10: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  11: Message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}) from P reaches P.1
  12: P.1: receives message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop})
    in gen_server.erl line 381
  13: P.1: {#Ref<0.4036243827.1754267649.127304>,ok} = P ! {#Ref<0.4036243827.1754267649.127304>,ok}
    in gen_server.erl line 243
  14: Message ({#Ref<0.4036243827.1754267649.127304>,ok}) from P.1 reaches P
  15: P.1: exits normally
  16: P.1: true = erlang:exit(P, normal)
    (while exiting)
  17: P.1: {'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal})
    (while exiting)
  18: Exit signal (normal) from P.1 reaches P
  19: Message ({'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal}) from P.1 reaches P
  20: P: true = erlang:demonitor(#Ref<0.4036243827.1754267649.127304>, [flush])
    in gen.erl line 179
  21: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  22: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  23: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
################################################################################
Interleaving #6
--------------------------------------------------------------------------------
Errors found:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,206}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,27}]}]
* At step 38 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2854
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
   8: P: #Ref<0.4036243827.1754267649.127304> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop})
    in gen_server.erl line 381
  12: P.1: {#Ref<0.4036243827.1754267649.127304>,ok} = P ! {#Ref<0.4036243827.1754267649.127304>,ok}
    in gen_server.erl line 243
  13: Message ({#Ref<0.4036243827.1754267649.127304>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: Message ({'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal}) from P.1 reaches P
  19: P: receives message ({#Ref<0.4036243827.1754267649.127304>,ok})
    in gen.erl line 169
  20: P: true = erlang:demonitor(#Ref<0.4036243827.1754267649.127304>, [flush])
    in gen.erl line 171
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2854
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 392
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 348
  28: P: #Ref<0.4036243827.1754267649.127629> = erlang:monitor(process, P.2)
    in gen.erl line 156
  29: P: {'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop}, [noconnect])
    in gen.erl line 167
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  31: P: true = erlang:demonitor(#Ref<0.4036243827.1754267649.127629>, [flush])
    in gen.erl line 179
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  37: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  38: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  39: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #7
--------------------------------------------------------------------------------
Errors found:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,206}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,27}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2854
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
   8: P: #Ref<0.4036243827.1754267649.127304> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop})
    in gen_server.erl line 381
  12: P.1: {#Ref<0.4036243827.1754267649.127304>,ok} = P ! {#Ref<0.4036243827.1754267649.127304>,ok}
    in gen_server.erl line 243
  13: Message ({#Ref<0.4036243827.1754267649.127304>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: Message ({'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal}) from P.1 reaches P
  19: P: receives message ({#Ref<0.4036243827.1754267649.127304>,ok})
    in gen.erl line 169
  20: P: true = erlang:demonitor(#Ref<0.4036243827.1754267649.127304>, [flush])
    in gen.erl line 171
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2854
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 392
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 348
  28: P: #Ref<0.4036243827.1754267649.127629> = erlang:monitor(process, P.2)
    in gen.erl line 156
  29: P: {'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop}, [noconnect])
    in gen.erl line 167
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  31: P: true = erlang:demonitor(#Ref<0.4036243827.1754267649.127629>, [flush])
    in gen.erl line 179
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop})
    in gen_server.erl line 381
  38: P.2: {#Ref<0.4036243827.1754267649.127629>,ok} = P ! {#Ref<0.4036243827.1754267649.127629>,ok}
    in gen_server.erl line 243
  39: P.2: exits normally
  40: P.2: true = erlang:exit(P, normal)
    (while exiting)
  41: Message ({#Ref<0.4036243827.1754267649.127629>,ok}) from P.2 reaches P
  42: Exit signal (normal) from P.2 reaches P
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Interleaving #8
--------------------------------------------------------------------------------
Errors found:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,206}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,27}]}]
* At step 41 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2854
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
   8: P: #Ref<0.4036243827.1754267649.127304> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop})
    in gen_server.erl line 381
  12: P.1: {#Ref<0.4036243827.1754267649.127304>,ok} = P ! {#Ref<0.4036243827.1754267649.127304>,ok}
    in gen_server.erl line 243
  13: Message ({#Ref<0.4036243827.1754267649.127304>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: Message ({'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal}) from P.1 reaches P
  19: P: receives message ({#Ref<0.4036243827.1754267649.127304>,ok})
    in gen.erl line 169
  20: P: true = erlang:demonitor(#Ref<0.4036243827.1754267649.127304>, [flush])
    in gen.erl line 171
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2854
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 392
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 348
  28: P: #Ref<0.4036243827.1754267649.127629> = erlang:monitor(process, P.2)
    in gen.erl line 156
  29: P: {'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop}, [noconnect])
    in gen.erl line 167
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  31: P: true = erlang:demonitor(#Ref<0.4036243827.1754267649.127629>, [flush])
    in gen.erl line 179
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop})
    in gen_server.erl line 381
  38: P.2: {#Ref<0.4036243827.1754267649.127629>,ok} = P ! {#Ref<0.4036243827.1754267649.127629>,ok}
    in gen_server.erl line 243
  39: Message ({#Ref<0.4036243827.1754267649.127629>,ok}) from P.2 reaches P
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  41: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #9
--------------------------------------------------------------------------------
Errors found:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,206}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,27}]}]
* At step 39 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2854
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
   8: P: #Ref<0.4036243827.1754267649.127304> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop})
    in gen_server.erl line 381
  12: P.1: {#Ref<0.4036243827.1754267649.127304>,ok} = P ! {#Ref<0.4036243827.1754267649.127304>,ok}
    in gen_server.erl line 243
  13: Message ({#Ref<0.4036243827.1754267649.127304>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: Message ({'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal}) from P.1 reaches P
  19: P: receives message ({#Ref<0.4036243827.1754267649.127304>,ok})
    in gen.erl line 169
  20: P: true = erlang:demonitor(#Ref<0.4036243827.1754267649.127304>, [flush])
    in gen.erl line 171
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2854
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 392
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 348
  28: P: #Ref<0.4036243827.1754267649.127629> = erlang:monitor(process, P.2)
    in gen.erl line 156
  29: P: {'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop}, [noconnect])
    in gen.erl line 167
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  31: P: true = erlang:demonitor(#Ref<0.4036243827.1754267649.127629>, [flush])
    in gen.erl line 179
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop})
    in gen_server.erl line 381
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  39: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #10
--------------------------------------------------------------------------------
Errors found:
* At step 41 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,206}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,27}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2854
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
   8: P: #Ref<0.4036243827.1754267649.127304> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127304>},stop})
    in gen_server.erl line 381
  12: P.1: {#Ref<0.4036243827.1754267649.127304>,ok} = P ! {#Ref<0.4036243827.1754267649.127304>,ok}
    in gen_server.erl line 243
  13: Message ({#Ref<0.4036243827.1754267649.127304>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: Message ({'DOWN',#Ref<0.4036243827.1754267649.127304>,process,P.1,normal}) from P.1 reaches P
  19: P: receives message ({#Ref<0.4036243827.1754267649.127304>,ok})
    in gen.erl line 169
  20: P: true = erlang:demonitor(#Ref<0.4036243827.1754267649.127304>, [flush])
    in gen.erl line 171
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2854
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 392
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 348
  28: P: #Ref<0.4036243827.1754267649.127629> = erlang:monitor(process, P.2)
    in gen.erl line 156
  29: P: {'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop}, [noconnect])
    in gen.erl line 167
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  31: Message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop}) from P reaches P.2
  32: P.2: receives message ({'$gen_call',{P,#Ref<0.4036243827.1754267649.127629>},stop})
    in gen_server.erl line 381
  33: P.2: {#Ref<0.4036243827.1754267649.127629>,ok} = P ! {#Ref<0.4036243827.1754267649.127629>,ok}
    in gen_server.erl line 243
  34: Message ({#Ref<0.4036243827.1754267649.127629>,ok}) from P.2 reaches P
  35: P.2: exits normally
  36: P.2: true = erlang:exit(P, normal)
    (while exiting)
  37: P.2: {'DOWN',#Ref<0.4036243827.1754267649.127629>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.4036243827.1754267649.127629>,process,P.2,normal})
    (while exiting)
  38: Exit signal (normal) from P.2 reaches P
  39: Message ({'DOWN',#Ref<0.4036243827.1754267649.127629>,process,P.2,normal}) from P.2 reaches P
  40: P: true = erlang:demonitor(#Ref<0.4036243827.1754267649.127629>, [flush])
    in gen.erl line 179
  41: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  45: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Exploration completed!
################################################################################
Warnings:
--------------------------------------------------------------------------------
Concuerror does not fully support erlang:get_stacktrace/0, returning an empty list instead. If you need proper support, notify the developers to add this feature.

################################################################################
Tips:
--------------------------------------------------------------------------------
A process crashed with reason '{timeout, ...}'. This may happen when a call to a gen_server (or similar) does not receive a reply within some standard timeout. Use the '--after_timeout' option to treat after clauses that exceed some threshold as 'impossible'.
An abnormal exit signal was sent to a process. This is probably the worst thing that can happen race-wise, as any other side-effecting operation races with the arrival of the signal. If the test produces too many interleavings consider refactoring your code.
Increase '--print_depth' if output/graph contains "...".
Each of the first 10 interleavings explored so far had some error. This can make later debugging difficult, as the generated report will include too much info. Consider refactoring your code, or using the appropriate options to filter out irrelevant errors.

################################################################################
Info:
--------------------------------------------------------------------------------
Instrumented gen_server_bug
Instrumented io_lib
Instrumented gen_server
Instrumented gen
Instrumented proc_lib
Instrumented erlang
You can see pairs of racing instructions (in the report and '--graph') with '--show_races true'
Continuing after error (-k)

################################################################################
Done at 09 Aug 2017 12:45:37 (Exit status: error)
  Summary: 10 errors, 11/11 interleavings explored
