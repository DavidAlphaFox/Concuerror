################################################################################
Concuerror started with options:
  [{after_timeout,infinity},
   {assume_racing,false},
   {delay_bound,infinity},
   {depth_bound,5000},
   {entry_point,{gen_server_bug,test_without_register,[]}},
   {files,["/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"]},
   {ignore_error,[]},
   {ignore_first_crash,true},
   {instant_delivery,false},
   {non_racing_system,[]},
   {optimal,true},
   {print_depth,20},
   {quiet,true},
   {scheduling,round_robin},
   {show_races,false},
   {strict_scheduling,false},
   {symbolic_names,true},
   {timeout,infinity},
   {treat_as_normal,[]}]
################################################################################
Erroneous interleaving 1:
* At step 16 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,23}]}]
* At step 20 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  15: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 223
  16: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  17: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  18: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  19: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
  20: P.1: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  21: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  22: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P.1 reaches P
################################################################################
Erroneous interleaving 2:
* At step 16 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,23}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  15: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 223
  16: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  17: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  18: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  19: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  20: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  21: P.1: exits normally
  22: P.1: true = erlang:exit(P, normal)
    (while exiting)
  23: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  24: Exit signal (normal) from P.1 reaches P
  25: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
################################################################################
Erroneous interleaving 3:
* At step 16 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,23}]}]
* At step 23 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  15: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 223
  16: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  17: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  18: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  19: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  20: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  21: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  22: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
  23: P.1: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  24: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  25: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P.1 reaches P
################################################################################
Erroneous interleaving 4:
* At step 25 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,23}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  15: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  16: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  17: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  18: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  19: P.1: exits normally
  20: P.1: true = erlang:exit(P, normal)
    (while exiting)
  21: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  22: Exit signal (normal) from P.1 reaches P
  23: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  24: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 223
  25: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  26: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  27: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
################################################################################
Erroneous interleaving 5:
* At step 24 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,23}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  15: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  16: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  17: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  18: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  19: P.1: exits normally
  20: P.1: true = erlang:exit(P, normal)
    (while exiting)
  21: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  22: Exit signal (normal) from P.1 reaches P
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 223
  24: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  25: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  26: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
  27: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
################################################################################
Erroneous interleaving 6:
* At step 40 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 46 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  23: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  24: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  25: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  26: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  27: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  28: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  29: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  30: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  31: Message ({init,error}) from init reaches P.2
  32: P.2: receives message ({init,error})
    in init.erl line 146
  33: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  34: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  35: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  36: P: #Ref<0.0.0.461> = erlang:monitor(process, P.2)
    in gen.erl line 200
  37: P: {'$gen_call',{P,#Ref<0.0.0.461>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.461>},stop}, [noconnect])
    in gen.erl line 211
  38: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  39: P: true = erlang:demonitor(#Ref<0.0.0.461>, [flush])
    in gen.erl line 223
  40: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  41: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Message ({'$gen_call',{P,#Ref<0.0.0.461>},stop}) from P reaches P.2
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  45: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  46: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  47: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  48: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Erroneous interleaving 7:
* At step 40 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  23: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  24: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  25: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  26: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  27: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  28: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  29: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  30: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  31: Message ({init,error}) from init reaches P.2
  32: P.2: receives message ({init,error})
    in init.erl line 146
  33: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  34: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  35: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  36: P: #Ref<0.0.0.461> = erlang:monitor(process, P.2)
    in gen.erl line 200
  37: P: {'$gen_call',{P,#Ref<0.0.0.461>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.461>},stop}, [noconnect])
    in gen.erl line 211
  38: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  39: P: true = erlang:demonitor(#Ref<0.0.0.461>, [flush])
    in gen.erl line 223
  40: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  41: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Message ({'$gen_call',{P,#Ref<0.0.0.461>},stop}) from P reaches P.2
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  45: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.461>},stop})
    in gen_server.erl line 360
  46: P.2: {#Ref<0.0.0.461>,ok} = P ! {#Ref<0.0.0.461>,ok}
    in gen_server.erl line 219
  47: P.2: exits normally
  48: P.2: true = erlang:exit(P, normal)
    (while exiting)
  49: Message ({#Ref<0.0.0.461>,ok}) from P.2 reaches P
  50: Exit signal (normal) from P.2 reaches P
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Erroneous interleaving 8:
* At step 40 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 49 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  23: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  24: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  25: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  26: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  27: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  28: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  29: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  30: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  31: Message ({init,error}) from init reaches P.2
  32: P.2: receives message ({init,error})
    in init.erl line 146
  33: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  34: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  35: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  36: P: #Ref<0.0.0.461> = erlang:monitor(process, P.2)
    in gen.erl line 200
  37: P: {'$gen_call',{P,#Ref<0.0.0.461>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.461>},stop}, [noconnect])
    in gen.erl line 211
  38: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  39: P: true = erlang:demonitor(#Ref<0.0.0.461>, [flush])
    in gen.erl line 223
  40: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  41: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Message ({'$gen_call',{P,#Ref<0.0.0.461>},stop}) from P reaches P.2
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  45: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.461>},stop})
    in gen_server.erl line 360
  46: P.2: {#Ref<0.0.0.461>,ok} = P ! {#Ref<0.0.0.461>,ok}
    in gen_server.erl line 219
  47: Message ({#Ref<0.0.0.461>,ok}) from P.2 reaches P
  48: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  49: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  50: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Erroneous interleaving 9:
* At step 49 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  23: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  24: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  25: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  26: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  27: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  28: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  29: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  30: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  31: Message ({init,error}) from init reaches P.2
  32: P.2: receives message ({init,error})
    in init.erl line 146
  33: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  34: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  35: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  36: P: #Ref<0.0.0.461> = erlang:monitor(process, P.2)
    in gen.erl line 200
  37: P: {'$gen_call',{P,#Ref<0.0.0.461>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.461>},stop}, [noconnect])
    in gen.erl line 211
  38: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  39: Message ({'$gen_call',{P,#Ref<0.0.0.461>},stop}) from P reaches P.2
  40: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.461>},stop})
    in gen_server.erl line 360
  41: P.2: {#Ref<0.0.0.461>,ok} = P ! {#Ref<0.0.0.461>,ok}
    in gen_server.erl line 219
  42: Message ({#Ref<0.0.0.461>,ok}) from P.2 reaches P
  43: P.2: exits normally
  44: P.2: true = erlang:exit(P, normal)
    (while exiting)
  45: P.2: {'DOWN',#Ref<0.0.0.461>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.461>,process,P.2,normal})
    (while exiting)
  46: Exit signal (normal) from P.2 reaches P
  47: Message ({'DOWN',#Ref<0.0.0.461>,process,P.2,normal}) from P.2 reaches P
  48: P: true = erlang:demonitor(#Ref<0.0.0.461>, [flush])
    in gen.erl line 223
  49: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  50: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  51: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  52: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  53: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Erroneous interleaving 10:
* At step 48 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  23: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  24: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  25: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  26: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  27: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  28: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  29: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  30: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  31: Message ({init,error}) from init reaches P.2
  32: P.2: receives message ({init,error})
    in init.erl line 146
  33: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  34: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  35: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  36: P: #Ref<0.0.0.461> = erlang:monitor(process, P.2)
    in gen.erl line 200
  37: P: {'$gen_call',{P,#Ref<0.0.0.461>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.461>},stop}, [noconnect])
    in gen.erl line 211
  38: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  39: Message ({'$gen_call',{P,#Ref<0.0.0.461>},stop}) from P reaches P.2
  40: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.461>},stop})
    in gen_server.erl line 360
  41: P.2: {#Ref<0.0.0.461>,ok} = P ! {#Ref<0.0.0.461>,ok}
    in gen_server.erl line 219
  42: Message ({#Ref<0.0.0.461>,ok}) from P.2 reaches P
  43: P.2: exits normally
  44: P.2: true = erlang:exit(P, normal)
    (while exiting)
  45: P.2: {'DOWN',#Ref<0.0.0.461>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.461>,process,P.2,normal})
    (while exiting)
  46: Exit signal (normal) from P.2 reaches P
  47: P: true = erlang:demonitor(#Ref<0.0.0.461>, [flush])
    in gen.erl line 223
  48: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  49: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  50: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  52: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  53: Message ({'DOWN',#Ref<0.0.0.461>,process,P.2,normal}) from P.2 reaches P
################################################################################
Erroneous interleaving 11:
* At step 40 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 46 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  27: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  28: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  29: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  30: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  31: Message ({init,error}) from init reaches P.2
  32: P.2: receives message ({init,error})
    in init.erl line 146
  33: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  34: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  35: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  36: P: #Ref<0.0.0.973> = erlang:monitor(process, P.2)
    in gen.erl line 200
  37: P: {'$gen_call',{P,#Ref<0.0.0.973>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.973>},stop}, [noconnect])
    in gen.erl line 211
  38: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  39: P: true = erlang:demonitor(#Ref<0.0.0.973>, [flush])
    in gen.erl line 223
  40: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  41: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Message ({'$gen_call',{P,#Ref<0.0.0.973>},stop}) from P reaches P.2
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  45: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  46: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  47: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  48: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Erroneous interleaving 12:
* At step 40 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  27: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  28: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  29: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  30: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  31: Message ({init,error}) from init reaches P.2
  32: P.2: receives message ({init,error})
    in init.erl line 146
  33: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  34: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  35: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  36: P: #Ref<0.0.0.973> = erlang:monitor(process, P.2)
    in gen.erl line 200
  37: P: {'$gen_call',{P,#Ref<0.0.0.973>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.973>},stop}, [noconnect])
    in gen.erl line 211
  38: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  39: P: true = erlang:demonitor(#Ref<0.0.0.973>, [flush])
    in gen.erl line 223
  40: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  41: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Message ({'$gen_call',{P,#Ref<0.0.0.973>},stop}) from P reaches P.2
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  45: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.973>},stop})
    in gen_server.erl line 360
  46: P.2: {#Ref<0.0.0.973>,ok} = P ! {#Ref<0.0.0.973>,ok}
    in gen_server.erl line 219
  47: P.2: exits normally
  48: P.2: true = erlang:exit(P, normal)
    (while exiting)
  49: Message ({#Ref<0.0.0.973>,ok}) from P.2 reaches P
  50: Exit signal (normal) from P.2 reaches P
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Erroneous interleaving 13:
* At step 40 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 49 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  27: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  28: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  29: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  30: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  31: Message ({init,error}) from init reaches P.2
  32: P.2: receives message ({init,error})
    in init.erl line 146
  33: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  34: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  35: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  36: P: #Ref<0.0.0.973> = erlang:monitor(process, P.2)
    in gen.erl line 200
  37: P: {'$gen_call',{P,#Ref<0.0.0.973>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.973>},stop}, [noconnect])
    in gen.erl line 211
  38: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  39: P: true = erlang:demonitor(#Ref<0.0.0.973>, [flush])
    in gen.erl line 223
  40: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  41: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Message ({'$gen_call',{P,#Ref<0.0.0.973>},stop}) from P reaches P.2
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  45: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.973>},stop})
    in gen_server.erl line 360
  46: P.2: {#Ref<0.0.0.973>,ok} = P ! {#Ref<0.0.0.973>,ok}
    in gen_server.erl line 219
  47: Message ({#Ref<0.0.0.973>,ok}) from P.2 reaches P
  48: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  49: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  50: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Erroneous interleaving 14:
* At step 49 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  27: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  28: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  29: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  30: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  31: Message ({init,error}) from init reaches P.2
  32: P.2: receives message ({init,error})
    in init.erl line 146
  33: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  34: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  35: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  36: P: #Ref<0.0.0.973> = erlang:monitor(process, P.2)
    in gen.erl line 200
  37: P: {'$gen_call',{P,#Ref<0.0.0.973>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.973>},stop}, [noconnect])
    in gen.erl line 211
  38: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  39: Message ({'$gen_call',{P,#Ref<0.0.0.973>},stop}) from P reaches P.2
  40: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.973>},stop})
    in gen_server.erl line 360
  41: P.2: {#Ref<0.0.0.973>,ok} = P ! {#Ref<0.0.0.973>,ok}
    in gen_server.erl line 219
  42: Message ({#Ref<0.0.0.973>,ok}) from P.2 reaches P
  43: P.2: exits normally
  44: P.2: true = erlang:exit(P, normal)
    (while exiting)
  45: P.2: {'DOWN',#Ref<0.0.0.973>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.973>,process,P.2,normal})
    (while exiting)
  46: Exit signal (normal) from P.2 reaches P
  47: Message ({'DOWN',#Ref<0.0.0.973>,process,P.2,normal}) from P.2 reaches P
  48: P: true = erlang:demonitor(#Ref<0.0.0.973>, [flush])
    in gen.erl line 223
  49: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  50: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  51: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  52: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  53: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Erroneous interleaving 15:
* At step 48 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  27: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  28: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  29: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  30: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  31: Message ({init,error}) from init reaches P.2
  32: P.2: receives message ({init,error})
    in init.erl line 146
  33: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  34: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  35: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  36: P: #Ref<0.0.0.973> = erlang:monitor(process, P.2)
    in gen.erl line 200
  37: P: {'$gen_call',{P,#Ref<0.0.0.973>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.973>},stop}, [noconnect])
    in gen.erl line 211
  38: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  39: Message ({'$gen_call',{P,#Ref<0.0.0.973>},stop}) from P reaches P.2
  40: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.973>},stop})
    in gen_server.erl line 360
  41: P.2: {#Ref<0.0.0.973>,ok} = P ! {#Ref<0.0.0.973>,ok}
    in gen_server.erl line 219
  42: Message ({#Ref<0.0.0.973>,ok}) from P.2 reaches P
  43: P.2: exits normally
  44: P.2: true = erlang:exit(P, normal)
    (while exiting)
  45: P.2: {'DOWN',#Ref<0.0.0.973>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.973>,process,P.2,normal})
    (while exiting)
  46: Exit signal (normal) from P.2 reaches P
  47: P: true = erlang:demonitor(#Ref<0.0.0.973>, [flush])
    in gen.erl line 223
  48: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  49: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  50: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  52: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  53: Message ({'DOWN',#Ref<0.0.0.973>,process,P.2,normal}) from P.2 reaches P
################################################################################
Erroneous interleaving 16:
* At step 39 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 46 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  27: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  28: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  29: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  30: Message ({init,error}) from init reaches P.2
  31: P.2: receives message ({init,error})
    in init.erl line 146
  32: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  33: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  34: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  35: P: #Ref<0.0.0.1457> = erlang:monitor(process, P.2)
    in gen.erl line 200
  36: P: {'$gen_call',{P,#Ref<0.0.0.1457>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.1457>},stop}, [noconnect])
    in gen.erl line 211
  37: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  38: P: true = erlang:demonitor(#Ref<0.0.0.1457>, [flush])
    in gen.erl line 223
  39: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: Message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop}) from P reaches P.2
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  45: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  46: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  47: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  48: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Erroneous interleaving 17:
* At step 39 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  27: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  28: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  29: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  30: Message ({init,error}) from init reaches P.2
  31: P.2: receives message ({init,error})
    in init.erl line 146
  32: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  33: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  34: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  35: P: #Ref<0.0.0.1457> = erlang:monitor(process, P.2)
    in gen.erl line 200
  36: P: {'$gen_call',{P,#Ref<0.0.0.1457>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.1457>},stop}, [noconnect])
    in gen.erl line 211
  37: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  38: P: true = erlang:demonitor(#Ref<0.0.0.1457>, [flush])
    in gen.erl line 223
  39: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: Message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop}) from P reaches P.2
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  44: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  45: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop})
    in gen_server.erl line 360
  46: P.2: {#Ref<0.0.0.1457>,ok} = P ! {#Ref<0.0.0.1457>,ok}
    in gen_server.erl line 219
  47: P.2: exits normally
  48: P.2: true = erlang:exit(P, normal)
    (while exiting)
  49: Message ({#Ref<0.0.0.1457>,ok}) from P.2 reaches P
  50: Exit signal (normal) from P.2 reaches P
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Erroneous interleaving 18:
* At step 39 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 49 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  27: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  28: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  29: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  30: Message ({init,error}) from init reaches P.2
  31: P.2: receives message ({init,error})
    in init.erl line 146
  32: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  33: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  34: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  35: P: #Ref<0.0.0.1457> = erlang:monitor(process, P.2)
    in gen.erl line 200
  36: P: {'$gen_call',{P,#Ref<0.0.0.1457>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.1457>},stop}, [noconnect])
    in gen.erl line 211
  37: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  38: P: true = erlang:demonitor(#Ref<0.0.0.1457>, [flush])
    in gen.erl line 223
  39: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: Message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop}) from P reaches P.2
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  44: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  45: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop})
    in gen_server.erl line 360
  46: P.2: {#Ref<0.0.0.1457>,ok} = P ! {#Ref<0.0.0.1457>,ok}
    in gen_server.erl line 219
  47: Message ({#Ref<0.0.0.1457>,ok}) from P.2 reaches P
  48: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  49: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  50: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Erroneous interleaving 19:
* At step 39 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  27: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  28: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  29: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  30: Message ({init,error}) from init reaches P.2
  31: P.2: receives message ({init,error})
    in init.erl line 146
  32: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  33: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  34: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  35: P: #Ref<0.0.0.1457> = erlang:monitor(process, P.2)
    in gen.erl line 200
  36: P: {'$gen_call',{P,#Ref<0.0.0.1457>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.1457>},stop}, [noconnect])
    in gen.erl line 211
  37: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  38: P: true = erlang:demonitor(#Ref<0.0.0.1457>, [flush])
    in gen.erl line 223
  39: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: Message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop}) from P reaches P.2
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  44: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop})
    in gen_server.erl line 360
  45: P.2: {#Ref<0.0.0.1457>,ok} = P ! {#Ref<0.0.0.1457>,ok}
    in gen_server.erl line 219
  46: P.2: exits normally
  47: P.2: true = erlang:exit(P, normal)
    (while exiting)
  48: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  49: Message ({#Ref<0.0.0.1457>,ok}) from P.2 reaches P
  50: Exit signal (normal) from P.2 reaches P
  51: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
################################################################################
Erroneous interleaving 20:
* At step 39 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 47 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  27: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  28: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  29: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  30: Message ({init,error}) from init reaches P.2
  31: P.2: receives message ({init,error})
    in init.erl line 146
  32: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  33: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  34: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  35: P: #Ref<0.0.0.1457> = erlang:monitor(process, P.2)
    in gen.erl line 200
  36: P: {'$gen_call',{P,#Ref<0.0.0.1457>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.1457>},stop}, [noconnect])
    in gen.erl line 211
  37: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  38: P: true = erlang:demonitor(#Ref<0.0.0.1457>, [flush])
    in gen.erl line 223
  39: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: Message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop}) from P reaches P.2
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  44: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop})
    in gen_server.erl line 360
  45: P.2: {#Ref<0.0.0.1457>,ok} = P ! {#Ref<0.0.0.1457>,ok}
    in gen_server.erl line 219
  46: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  47: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  48: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  49: Message ({#Ref<0.0.0.1457>,ok}) from P.2 reaches P
  50: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
  51: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
################################################################################
Erroneous interleaving 21:
* At step 39 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 47 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  27: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  28: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  29: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  30: Message ({init,error}) from init reaches P.2
  31: P.2: receives message ({init,error})
    in init.erl line 146
  32: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  33: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  34: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  35: P: #Ref<0.0.0.1457> = erlang:monitor(process, P.2)
    in gen.erl line 200
  36: P: {'$gen_call',{P,#Ref<0.0.0.1457>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.1457>},stop}, [noconnect])
    in gen.erl line 211
  37: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  38: P: true = erlang:demonitor(#Ref<0.0.0.1457>, [flush])
    in gen.erl line 223
  39: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: Message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop}) from P reaches P.2
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  44: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop})
    in gen_server.erl line 360
  45: P.2: {#Ref<0.0.0.1457>,ok} = P ! {#Ref<0.0.0.1457>,ok}
    in gen_server.erl line 219
  46: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  47: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  48: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  49: Message ({#Ref<0.0.0.1457>,ok}) from P.2 reaches P
  50: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Erroneous interleaving 22:
* At step 49 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  27: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  28: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  29: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  30: Message ({init,error}) from init reaches P.2
  31: P.2: receives message ({init,error})
    in init.erl line 146
  32: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  33: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  34: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  35: P: #Ref<0.0.0.1457> = erlang:monitor(process, P.2)
    in gen.erl line 200
  36: P: {'$gen_call',{P,#Ref<0.0.0.1457>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.1457>},stop}, [noconnect])
    in gen.erl line 211
  37: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  38: Message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop}) from P reaches P.2
  39: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  40: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop})
    in gen_server.erl line 360
  41: P.2: {#Ref<0.0.0.1457>,ok} = P ! {#Ref<0.0.0.1457>,ok}
    in gen_server.erl line 219
  42: Message ({#Ref<0.0.0.1457>,ok}) from P.2 reaches P
  43: P.2: exits normally
  44: P.2: true = erlang:exit(P, normal)
    (while exiting)
  45: P.2: {'DOWN',#Ref<0.0.0.1457>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.1457>,process,P.2,normal})
    (while exiting)
  46: Exit signal (normal) from P.2 reaches P
  47: Message ({'DOWN',#Ref<0.0.0.1457>,process,P.2,normal}) from P.2 reaches P
  48: P: true = erlang:demonitor(#Ref<0.0.0.1457>, [flush])
    in gen.erl line 223
  49: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  50: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  51: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  52: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  53: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Erroneous interleaving 23:
* At step 48 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  27: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  28: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  29: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  30: Message ({init,error}) from init reaches P.2
  31: P.2: receives message ({init,error})
    in init.erl line 146
  32: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  33: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  34: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  35: P: #Ref<0.0.0.1457> = erlang:monitor(process, P.2)
    in gen.erl line 200
  36: P: {'$gen_call',{P,#Ref<0.0.0.1457>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.1457>},stop}, [noconnect])
    in gen.erl line 211
  37: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  38: Message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop}) from P reaches P.2
  39: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  40: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop})
    in gen_server.erl line 360
  41: P.2: {#Ref<0.0.0.1457>,ok} = P ! {#Ref<0.0.0.1457>,ok}
    in gen_server.erl line 219
  42: Message ({#Ref<0.0.0.1457>,ok}) from P.2 reaches P
  43: P.2: exits normally
  44: P.2: true = erlang:exit(P, normal)
    (while exiting)
  45: P.2: {'DOWN',#Ref<0.0.0.1457>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.1457>,process,P.2,normal})
    (while exiting)
  46: Exit signal (normal) from P.2 reaches P
  47: P: true = erlang:demonitor(#Ref<0.0.0.1457>, [flush])
    in gen.erl line 223
  48: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  49: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  50: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  52: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  53: Message ({'DOWN',#Ref<0.0.0.1457>,process,P.2,normal}) from P.2 reaches P
################################################################################
Erroneous interleaving 24:
* At step 49 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  27: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  28: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  29: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  30: Message ({init,error}) from init reaches P.2
  31: P.2: receives message ({init,error})
    in init.erl line 146
  32: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  33: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  34: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  35: P: #Ref<0.0.0.1457> = erlang:monitor(process, P.2)
    in gen.erl line 200
  36: P: {'$gen_call',{P,#Ref<0.0.0.1457>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.1457>},stop}, [noconnect])
    in gen.erl line 211
  37: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  38: Message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop}) from P reaches P.2
  39: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop})
    in gen_server.erl line 360
  40: P.2: {#Ref<0.0.0.1457>,ok} = P ! {#Ref<0.0.0.1457>,ok}
    in gen_server.erl line 219
  41: Message ({#Ref<0.0.0.1457>,ok}) from P.2 reaches P
  42: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  43: P.2: exits normally
  44: P.2: true = erlang:exit(P, normal)
    (while exiting)
  45: P.2: {'DOWN',#Ref<0.0.0.1457>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.1457>,process,P.2,normal})
    (while exiting)
  46: Exit signal (normal) from P.2 reaches P
  47: Message ({'DOWN',#Ref<0.0.0.1457>,process,P.2,normal}) from P.2 reaches P
  48: P: true = erlang:demonitor(#Ref<0.0.0.1457>, [flush])
    in gen.erl line 223
  49: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  50: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  51: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  52: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  53: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Erroneous interleaving 25:
* At step 48 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  27: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  28: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  29: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  30: Message ({init,error}) from init reaches P.2
  31: P.2: receives message ({init,error})
    in init.erl line 146
  32: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  33: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  34: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  35: P: #Ref<0.0.0.1457> = erlang:monitor(process, P.2)
    in gen.erl line 200
  36: P: {'$gen_call',{P,#Ref<0.0.0.1457>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.1457>},stop}, [noconnect])
    in gen.erl line 211
  37: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  38: Message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop}) from P reaches P.2
  39: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop})
    in gen_server.erl line 360
  40: P.2: {#Ref<0.0.0.1457>,ok} = P ! {#Ref<0.0.0.1457>,ok}
    in gen_server.erl line 219
  41: Message ({#Ref<0.0.0.1457>,ok}) from P.2 reaches P
  42: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
  43: P.2: exits normally
  44: P.2: true = erlang:exit(P, normal)
    (while exiting)
  45: P.2: {'DOWN',#Ref<0.0.0.1457>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.1457>,process,P.2,normal})
    (while exiting)
  46: Exit signal (normal) from P.2 reaches P
  47: P: true = erlang:demonitor(#Ref<0.0.0.1457>, [flush])
    in gen.erl line 223
  48: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  49: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  50: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  52: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  53: Message ({'DOWN',#Ref<0.0.0.1457>,process,P.2,normal}) from P.2 reaches P
################################################################################
Erroneous interleaving 26:
* At step 48 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  27: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  28: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  29: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  30: Message ({init,error}) from init reaches P.2
  31: P.2: receives message ({init,error})
    in init.erl line 146
  32: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  33: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  34: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  35: P: #Ref<0.0.0.1457> = erlang:monitor(process, P.2)
    in gen.erl line 200
  36: P: {'$gen_call',{P,#Ref<0.0.0.1457>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.1457>},stop}, [noconnect])
    in gen.erl line 211
  37: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  38: Message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop}) from P reaches P.2
  39: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop})
    in gen_server.erl line 360
  40: P.2: {#Ref<0.0.0.1457>,ok} = P ! {#Ref<0.0.0.1457>,ok}
    in gen_server.erl line 219
  41: Message ({#Ref<0.0.0.1457>,ok}) from P.2 reaches P
  42: P.2: exits normally
  43: P.2: true = erlang:exit(P, normal)
    (while exiting)
  44: P.2: {'DOWN',#Ref<0.0.0.1457>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.1457>,process,P.2,normal})
    (while exiting)
  45: Exit signal (normal) from P.2 reaches P
  46: Message ({'DOWN',#Ref<0.0.0.1457>,process,P.2,normal}) from P.2 reaches P
  47: P: true = erlang:demonitor(#Ref<0.0.0.1457>, [flush])
    in gen.erl line 223
  48: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  49: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  50: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  52: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  53: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
################################################################################
Erroneous interleaving 27:
* At step 47 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: P.1: {'DOWN',#Ref<0.0.0.176>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.176>,process,P.1,normal})
    (while exiting)
  21: Exit signal (normal) from P.1 reaches P
  22: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  23: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  24: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  25: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  26: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  27: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  28: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  29: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  30: Message ({init,error}) from init reaches P.2
  31: P.2: receives message ({init,error})
    in init.erl line 146
  32: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  33: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  34: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  35: P: #Ref<0.0.0.1457> = erlang:monitor(process, P.2)
    in gen.erl line 200
  36: P: {'$gen_call',{P,#Ref<0.0.0.1457>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.1457>},stop}, [noconnect])
    in gen.erl line 211
  37: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  38: Message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop}) from P reaches P.2
  39: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.1457>},stop})
    in gen_server.erl line 360
  40: P.2: {#Ref<0.0.0.1457>,ok} = P ! {#Ref<0.0.0.1457>,ok}
    in gen_server.erl line 219
  41: Message ({#Ref<0.0.0.1457>,ok}) from P.2 reaches P
  42: P.2: exits normally
  43: P.2: true = erlang:exit(P, normal)
    (while exiting)
  44: P.2: {'DOWN',#Ref<0.0.0.1457>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.1457>,process,P.2,normal})
    (while exiting)
  45: Exit signal (normal) from P.2 reaches P
  46: P: true = erlang:demonitor(#Ref<0.0.0.1457>, [flush])
    in gen.erl line 223
  47: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  48: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  49: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  50: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  52: Message ({'DOWN',#Ref<0.0.0.1457>,process,P.2,normal}) from P.2 reaches P
  53: Message ({'DOWN',#Ref<0.0.0.176>,process,P.1,normal}) from P.1 reaches P
################################################################################
Erroneous interleaving 28:
* At step 38 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 44 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  19: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  22: P.1: exits normally
  23: P.1: true = erlang:exit(P, normal)
    (while exiting)
  24: Exit signal (normal) from P.1 reaches P
  25: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  26: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  27: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  28: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  29: Message ({init,error}) from init reaches P.2
  30: P.2: receives message ({init,error})
    in init.erl line 146
  31: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  32: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  33: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  34: P: #Ref<0.0.0.2491> = erlang:monitor(process, P.2)
    in gen.erl line 200
  35: P: {'$gen_call',{P,#Ref<0.0.0.2491>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.2491>},stop}, [noconnect])
    in gen.erl line 211
  36: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  37: P: true = erlang:demonitor(#Ref<0.0.0.2491>, [flush])
    in gen.erl line 223
  38: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  39: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  40: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop}) from P reaches P.2
  42: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  44: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  45: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  46: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Erroneous interleaving 29:
* At step 38 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  19: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  22: P.1: exits normally
  23: P.1: true = erlang:exit(P, normal)
    (while exiting)
  24: Exit signal (normal) from P.1 reaches P
  25: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  26: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  27: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  28: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  29: Message ({init,error}) from init reaches P.2
  30: P.2: receives message ({init,error})
    in init.erl line 146
  31: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  32: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  33: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  34: P: #Ref<0.0.0.2491> = erlang:monitor(process, P.2)
    in gen.erl line 200
  35: P: {'$gen_call',{P,#Ref<0.0.0.2491>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.2491>},stop}, [noconnect])
    in gen.erl line 211
  36: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  37: P: true = erlang:demonitor(#Ref<0.0.0.2491>, [flush])
    in gen.erl line 223
  38: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  39: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  40: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop}) from P reaches P.2
  42: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  43: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop})
    in gen_server.erl line 360
  44: P.2: {#Ref<0.0.0.2491>,ok} = P ! {#Ref<0.0.0.2491>,ok}
    in gen_server.erl line 219
  45: P.2: exits normally
  46: P.2: true = erlang:exit(P, normal)
    (while exiting)
  47: Message ({#Ref<0.0.0.2491>,ok}) from P.2 reaches P
  48: Exit signal (normal) from P.2 reaches P
  49: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Erroneous interleaving 30:
* At step 38 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 47 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  19: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  22: P.1: exits normally
  23: P.1: true = erlang:exit(P, normal)
    (while exiting)
  24: Exit signal (normal) from P.1 reaches P
  25: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  26: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  27: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  28: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  29: Message ({init,error}) from init reaches P.2
  30: P.2: receives message ({init,error})
    in init.erl line 146
  31: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  32: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  33: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  34: P: #Ref<0.0.0.2491> = erlang:monitor(process, P.2)
    in gen.erl line 200
  35: P: {'$gen_call',{P,#Ref<0.0.0.2491>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.2491>},stop}, [noconnect])
    in gen.erl line 211
  36: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  37: P: true = erlang:demonitor(#Ref<0.0.0.2491>, [flush])
    in gen.erl line 223
  38: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  39: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  40: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop}) from P reaches P.2
  42: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  43: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop})
    in gen_server.erl line 360
  44: P.2: {#Ref<0.0.0.2491>,ok} = P ! {#Ref<0.0.0.2491>,ok}
    in gen_server.erl line 219
  45: Message ({#Ref<0.0.0.2491>,ok}) from P.2 reaches P
  46: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  47: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  48: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  49: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Erroneous interleaving 31:
* At step 47 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  19: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  22: P.1: exits normally
  23: P.1: true = erlang:exit(P, normal)
    (while exiting)
  24: Exit signal (normal) from P.1 reaches P
  25: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  26: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  27: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  28: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  29: Message ({init,error}) from init reaches P.2
  30: P.2: receives message ({init,error})
    in init.erl line 146
  31: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  32: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  33: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  34: P: #Ref<0.0.0.2491> = erlang:monitor(process, P.2)
    in gen.erl line 200
  35: P: {'$gen_call',{P,#Ref<0.0.0.2491>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.2491>},stop}, [noconnect])
    in gen.erl line 211
  36: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  37: Message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop}) from P reaches P.2
  38: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop})
    in gen_server.erl line 360
  39: P.2: {#Ref<0.0.0.2491>,ok} = P ! {#Ref<0.0.0.2491>,ok}
    in gen_server.erl line 219
  40: Message ({#Ref<0.0.0.2491>,ok}) from P.2 reaches P
  41: P.2: exits normally
  42: P.2: true = erlang:exit(P, normal)
    (while exiting)
  43: P.2: {'DOWN',#Ref<0.0.0.2491>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.2491>,process,P.2,normal})
    (while exiting)
  44: Exit signal (normal) from P.2 reaches P
  45: Message ({'DOWN',#Ref<0.0.0.2491>,process,P.2,normal}) from P.2 reaches P
  46: P: true = erlang:demonitor(#Ref<0.0.0.2491>, [flush])
    in gen.erl line 223
  47: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  48: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  49: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  50: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Erroneous interleaving 32:
* At step 46 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  19: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  22: P.1: exits normally
  23: P.1: true = erlang:exit(P, normal)
    (while exiting)
  24: Exit signal (normal) from P.1 reaches P
  25: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  26: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  27: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  28: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  29: Message ({init,error}) from init reaches P.2
  30: P.2: receives message ({init,error})
    in init.erl line 146
  31: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  32: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  33: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  34: P: #Ref<0.0.0.2491> = erlang:monitor(process, P.2)
    in gen.erl line 200
  35: P: {'$gen_call',{P,#Ref<0.0.0.2491>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.2491>},stop}, [noconnect])
    in gen.erl line 211
  36: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  37: Message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop}) from P reaches P.2
  38: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop})
    in gen_server.erl line 360
  39: P.2: {#Ref<0.0.0.2491>,ok} = P ! {#Ref<0.0.0.2491>,ok}
    in gen_server.erl line 219
  40: Message ({#Ref<0.0.0.2491>,ok}) from P.2 reaches P
  41: P.2: exits normally
  42: P.2: true = erlang:exit(P, normal)
    (while exiting)
  43: P.2: {'DOWN',#Ref<0.0.0.2491>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.2491>,process,P.2,normal})
    (while exiting)
  44: Exit signal (normal) from P.2 reaches P
  45: P: true = erlang:demonitor(#Ref<0.0.0.2491>, [flush])
    in gen.erl line 223
  46: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  47: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  48: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  49: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  50: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  51: Message ({'DOWN',#Ref<0.0.0.2491>,process,P.2,normal}) from P.2 reaches P
################################################################################
Erroneous interleaving 33:
* At step 35 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 40 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
* At step 44 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  19: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  24: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  25: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  26: Message ({init,error}) from init reaches P.2
  27: P.2: receives message ({init,error})
    in init.erl line 146
  28: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  29: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  30: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  31: P: #Ref<0.0.0.2491> = erlang:monitor(process, P.2)
    in gen.erl line 200
  32: P: {'$gen_call',{P,#Ref<0.0.0.2491>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.2491>},stop}, [noconnect])
    in gen.erl line 211
  33: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  34: P: true = erlang:demonitor(#Ref<0.0.0.2491>, [flush])
    in gen.erl line 223
  35: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  36: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  37: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  38: Message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop}) from P reaches P.2
  39: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  40: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  41: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  44: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  45: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  46: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
################################################################################
Erroneous interleaving 34:
* At step 35 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 47 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  19: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  24: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  25: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  26: Message ({init,error}) from init reaches P.2
  27: P.2: receives message ({init,error})
    in init.erl line 146
  28: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  29: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  30: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  31: P: #Ref<0.0.0.2491> = erlang:monitor(process, P.2)
    in gen.erl line 200
  32: P: {'$gen_call',{P,#Ref<0.0.0.2491>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.2491>},stop}, [noconnect])
    in gen.erl line 211
  33: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  34: P: true = erlang:demonitor(#Ref<0.0.0.2491>, [flush])
    in gen.erl line 223
  35: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  36: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  37: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  38: Message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop}) from P reaches P.2
  39: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop})
    in gen_server.erl line 360
  40: P.2: {#Ref<0.0.0.2491>,ok} = P ! {#Ref<0.0.0.2491>,ok}
    in gen_server.erl line 219
  41: P.2: exits normally
  42: P.2: true = erlang:exit(P, normal)
    (while exiting)
  43: Message ({#Ref<0.0.0.2491>,ok}) from P.2 reaches P
  44: Exit signal (normal) from P.2 reaches P
  45: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  46: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  47: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  48: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  49: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
################################################################################
Erroneous interleaving 35:
* At step 35 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 43 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
* At step 47 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  19: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  24: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  25: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  26: Message ({init,error}) from init reaches P.2
  27: P.2: receives message ({init,error})
    in init.erl line 146
  28: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  29: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  30: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  31: P: #Ref<0.0.0.2491> = erlang:monitor(process, P.2)
    in gen.erl line 200
  32: P: {'$gen_call',{P,#Ref<0.0.0.2491>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.2491>},stop}, [noconnect])
    in gen.erl line 211
  33: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  34: P: true = erlang:demonitor(#Ref<0.0.0.2491>, [flush])
    in gen.erl line 223
  35: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  36: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  37: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  38: Message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop}) from P reaches P.2
  39: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop})
    in gen_server.erl line 360
  40: P.2: {#Ref<0.0.0.2491>,ok} = P ! {#Ref<0.0.0.2491>,ok}
    in gen_server.erl line 219
  41: Message ({#Ref<0.0.0.2491>,ok}) from P.2 reaches P
  42: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  43: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  44: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  45: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
  46: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  47: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  48: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  49: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
################################################################################
Erroneous interleaving 36:
* At step 44 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 49 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  19: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  24: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  25: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  26: Message ({init,error}) from init reaches P.2
  27: P.2: receives message ({init,error})
    in init.erl line 146
  28: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  29: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  30: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  31: P: #Ref<0.0.0.2491> = erlang:monitor(process, P.2)
    in gen.erl line 200
  32: P: {'$gen_call',{P,#Ref<0.0.0.2491>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.2491>},stop}, [noconnect])
    in gen.erl line 211
  33: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  34: Message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop}) from P reaches P.2
  35: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop})
    in gen_server.erl line 360
  36: P.2: {#Ref<0.0.0.2491>,ok} = P ! {#Ref<0.0.0.2491>,ok}
    in gen_server.erl line 219
  37: Message ({#Ref<0.0.0.2491>,ok}) from P.2 reaches P
  38: P.2: exits normally
  39: P.2: true = erlang:exit(P, normal)
    (while exiting)
  40: P.2: {'DOWN',#Ref<0.0.0.2491>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.2491>,process,P.2,normal})
    (while exiting)
  41: Exit signal (normal) from P.2 reaches P
  42: Message ({'DOWN',#Ref<0.0.0.2491>,process,P.2,normal}) from P.2 reaches P
  43: P: true = erlang:demonitor(#Ref<0.0.0.2491>, [flush])
    in gen.erl line 223
  44: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  45: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  46: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  47: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  48: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  49: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  50: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
################################################################################
Erroneous interleaving 37:
* At step 43 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,182}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 49 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
   5: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   6: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   7: Message ({init,error}) from init reaches P.1
   8: P.1: receives message ({init,error})
    in init.erl line 146
   9: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  10: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  11: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  12: P: #Ref<0.0.0.176> = erlang:monitor(process, P.1)
    in gen.erl line 200
  13: P: {'$gen_call',{P,#Ref<0.0.0.176>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.0.176>},stop}, [noconnect])
    in gen.erl line 211
  14: Message ({'$gen_call',{P,#Ref<0.0.0.176>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.0.176>},stop})
    in gen_server.erl line 360
  16: P.1: {#Ref<0.0.0.176>,ok} = P ! {#Ref<0.0.0.176>,ok}
    in gen_server.erl line 219
  17: Message ({#Ref<0.0.0.176>,ok}) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.0.176>,ok})
    in gen.erl line 213
  19: P: true = erlang:demonitor(#Ref<0.0.0.176>, [flush])
    in gen.erl line 215
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2507
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 234
  24: P.2: {P.2,{get_argument,generic_debug}} = init ! {P.2,{get_argument,generic_debug}}
    in init.erl line 145
  25: Message ({P.2,{get_argument,generic_debug}}) from P.2 reaches init
  26: Message ({init,error}) from init reaches P.2
  27: P.2: receives message ({init,error})
    in init.erl line 146
  28: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 377
  29: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  30: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 333
  31: P: #Ref<0.0.0.2491> = erlang:monitor(process, P.2)
    in gen.erl line 200
  32: P: {'$gen_call',{P,#Ref<0.0.0.2491>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.0.2491>},stop}, [noconnect])
    in gen.erl line 211
  33: P: receive timeout expired after 5000 ms
    in gen.erl line 213
  34: Message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop}) from P reaches P.2
  35: P.2: receives message ({'$gen_call',{P,#Ref<0.0.0.2491>},stop})
    in gen_server.erl line 360
  36: P.2: {#Ref<0.0.0.2491>,ok} = P ! {#Ref<0.0.0.2491>,ok}
    in gen_server.erl line 219
  37: Message ({#Ref<0.0.0.2491>,ok}) from P.2 reaches P
  38: P.2: exits normally
  39: P.2: true = erlang:exit(P, normal)
    (while exiting)
  40: P.2: {'DOWN',#Ref<0.0.0.2491>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.2491>,process,P.2,normal})
    (while exiting)
  41: Exit signal (normal) from P.2 reaches P
  42: P: true = erlang:demonitor(#Ref<0.0.0.2491>, [flush])
    in gen.erl line 223
  43: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  44: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  45: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  46: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  47: Message ({'DOWN',#Ref<0.0.0.2491>,process,P.2,normal}) from P.2 reaches P
  48: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  49: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  50: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  51: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
################################################################################
Tips:
--------------------------------------------------------------------------------
A process crashed with reason '{timeout, ...}'. This may happen when a call to a gen_server (or similar) does not receive a reply within some standard timeout. Use the '--after_timeout' option to treat after clauses that exceed some threshold as 'impossible'.
An abnormal exit signal was sent to a process. This is probably the worst thing that can happen race-wise, as any other side-effecting operation races with the arrival of the signal. If the test produces too many interleavings consider refactoring your code.
Every interleaving explored so far had some error. This can make later debugging difficult, as the generated report will include too much info. You may want to consider refactoring your code, or using the appropriate options to filter out irrelevant errors.
################################################################################
Info:
--------------------------------------------------------------------------------
Instrumented gen_server_bug
Instrumented io_lib
Instrumented gen_server
Instrumented gen
Instrumented proc_lib
Instrumented erlang
Instrumented init
Instrumented sys
################################################################################
Done! (Exit status: completed)
  Summary: 37 errors, 54/54 interleavings explored
