################################################################################

Concuerror started with options:
  [{after_timeout,infinity},
   {assume_racing,false},
   {depth_bound,5000},
   {entry_point,{gen_server_bug,test_without_register,[]}},
   {files,["/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"]},
   {ignore_error,[]},
   {instant_delivery,false},
   {interleaving_bound,infinity},
   {keep_going,true},
   {non_racing_system,[]},
   {optimal,true},
   {print_depth,20},
   {scheduling,round_robin},
   {scheduling_bound,infinity},
   {scheduling_bound_type,none},
   {show_races,false},
   {strict_scheduling,false},
   {symbolic_names,true},
   {timeout,infinity},
   {treat_as_normal,[]}]
################################################################################

Erroneous interleaving 1:
* At step 12 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,23}]}]
* At step 16 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  11: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 178
  12: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  13: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  14: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  15: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
  16: P.1: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  17: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  18: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P.1 reaches P
################################################################################

Erroneous interleaving 2:
* At step 12 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,23}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  11: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 178
  12: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  13: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  14: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  16: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  17: P.1: exits normally
  18: P.1: true = erlang:exit(P, normal)
    (while exiting)
  19: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  20: Exit signal (normal) from P.1 reaches P
  21: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
################################################################################

Erroneous interleaving 3:
* At step 12 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,23}]}]
* At step 19 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  11: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 178
  12: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  13: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  14: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  16: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  17: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  18: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
  19: P.1: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  20: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  21: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P.1 reaches P
################################################################################

Erroneous interleaving 4:
* At step 21 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,23}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  11: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  12: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  13: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  14: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  15: P.1: exits normally
  16: P.1: true = erlang:exit(P, normal)
    (while exiting)
  17: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  18: Exit signal (normal) from P.1 reaches P
  19: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  20: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 178
  21: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  22: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  23: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
################################################################################

Erroneous interleaving 5:
* At step 20 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,23}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  11: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  12: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  13: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  14: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  15: P.1: exits normally
  16: P.1: true = erlang:exit(P, normal)
    (while exiting)
  17: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  18: Exit signal (normal) from P.1 reaches P
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 178
  20: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  21: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  22: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
  23: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
################################################################################

Erroneous interleaving 6:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 38 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  19: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  20: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  28: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  29: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  31: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  37: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  38: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  39: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################

Erroneous interleaving 7:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  19: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  20: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  28: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  29: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  31: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  38: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  39: P.2: exits normally
  40: P.2: true = erlang:exit(P, normal)
    (while exiting)
  41: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  42: Exit signal (normal) from P.2 reaches P
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################

Erroneous interleaving 8:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 41 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  19: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  20: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  28: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  29: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  31: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  38: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  39: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  41: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################

Erroneous interleaving 9:
* At step 41 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  19: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  20: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  28: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  29: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  31: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  32: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  33: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  34: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  35: P.2: exits normally
  36: P.2: true = erlang:exit(P, normal)
    (while exiting)
  37: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  38: Exit signal (normal) from P.2 reaches P
  39: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
  40: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  41: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  45: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################

Erroneous interleaving 10:
* At step 40 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  19: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  20: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  28: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  29: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  31: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  32: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  33: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  34: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  35: P.2: exits normally
  36: P.2: true = erlang:exit(P, normal)
    (while exiting)
  37: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  38: Exit signal (normal) from P.2 reaches P
  39: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  40: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  41: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  45: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
################################################################################

Erroneous interleaving 11:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 38 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  28: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  29: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  31: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  37: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  38: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  39: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################

Erroneous interleaving 12:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  28: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  29: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  31: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  38: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  39: P.2: exits normally
  40: P.2: true = erlang:exit(P, normal)
    (while exiting)
  41: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  42: Exit signal (normal) from P.2 reaches P
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################

Erroneous interleaving 13:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 41 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  28: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  29: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  31: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  38: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  39: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  41: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################

Erroneous interleaving 14:
* At step 41 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  28: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  29: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  31: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  32: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  33: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  34: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  35: P.2: exits normally
  36: P.2: true = erlang:exit(P, normal)
    (while exiting)
  37: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  38: Exit signal (normal) from P.2 reaches P
  39: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
  40: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  41: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  45: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################

Erroneous interleaving 15:
* At step 40 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  28: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  29: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  31: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  32: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  33: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  34: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  35: P.2: exits normally
  36: P.2: true = erlang:exit(P, normal)
    (while exiting)
  37: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  38: Exit signal (normal) from P.2 reaches P
  39: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  40: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  41: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  45: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
################################################################################

Erroneous interleaving 16:
* At step 31 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 38 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  27: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  28: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  30: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  31: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  32: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  38: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  39: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################

Erroneous interleaving 17:
* At step 31 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 37 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  27: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  28: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  30: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  31: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  32: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  38: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  39: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
  40: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
################################################################################

Erroneous interleaving 18:
* At step 31 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  27: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  28: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  30: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  31: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  32: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  38: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  39: P.2: exits normally
  40: P.2: true = erlang:exit(P, normal)
    (while exiting)
  41: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  42: Exit signal (normal) from P.2 reaches P
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################

Erroneous interleaving 19:
* At step 31 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 41 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  27: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  28: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  30: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  31: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  32: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  38: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  39: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  41: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################

Erroneous interleaving 20:
* At step 31 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  27: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  28: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  30: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  31: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  32: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  37: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  38: P.2: exits normally
  39: P.2: true = erlang:exit(P, normal)
    (while exiting)
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  41: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  42: Exit signal (normal) from P.2 reaches P
  43: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
################################################################################

Erroneous interleaving 21:
* At step 31 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 39 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  27: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  28: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  30: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  31: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  32: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  37: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  39: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  42: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
  43: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
################################################################################

Erroneous interleaving 22:
* At step 31 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 39 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  27: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  28: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  30: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  31: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  32: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  37: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  39: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  42: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################

Erroneous interleaving 23:
* At step 41 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  27: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  28: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  30: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  31: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  32: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  33: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  34: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  35: P.2: exits normally
  36: P.2: true = erlang:exit(P, normal)
    (while exiting)
  37: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  38: Exit signal (normal) from P.2 reaches P
  39: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
  40: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  41: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  45: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################

Erroneous interleaving 24:
* At step 40 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  27: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  28: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  30: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  31: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  32: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  33: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  34: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  35: P.2: exits normally
  36: P.2: true = erlang:exit(P, normal)
    (while exiting)
  37: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  38: Exit signal (normal) from P.2 reaches P
  39: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  40: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  41: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  45: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
################################################################################

Erroneous interleaving 25:
* At step 41 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  27: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  28: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  30: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  32: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  33: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  34: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  35: P.2: exits normally
  36: P.2: true = erlang:exit(P, normal)
    (while exiting)
  37: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  38: Exit signal (normal) from P.2 reaches P
  39: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
  40: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  41: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  45: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################

Erroneous interleaving 26:
* At step 40 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  27: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  28: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  30: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  32: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  33: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  34: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  35: P.2: exits normally
  36: P.2: true = erlang:exit(P, normal)
    (while exiting)
  37: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  38: Exit signal (normal) from P.2 reaches P
  39: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  40: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  41: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  45: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
################################################################################

Erroneous interleaving 27:
* At step 40 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  27: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  28: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  30: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  32: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  33: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  34: P.2: exits normally
  35: P.2: true = erlang:exit(P, normal)
    (while exiting)
  36: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  37: Exit signal (normal) from P.2 reaches P
  38: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
  39: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  40: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  41: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  45: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
################################################################################

Erroneous interleaving 28:
* At step 39 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  27: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  28: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  30: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  32: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  33: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  34: P.2: exits normally
  35: P.2: true = erlang:exit(P, normal)
    (while exiting)
  36: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  37: Exit signal (normal) from P.2 reaches P
  38: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  39: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  44: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
  45: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
################################################################################

Erroneous interleaving 29:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 38 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  20: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  28: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  29: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  31: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  37: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  38: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  39: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################

Erroneous interleaving 30:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  20: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  28: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  29: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  31: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  38: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  39: P.2: exits normally
  40: P.2: true = erlang:exit(P, normal)
    (while exiting)
  41: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  42: Exit signal (normal) from P.2 reaches P
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################

Erroneous interleaving 31:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 41 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  20: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  28: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  29: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  31: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  38: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  39: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  41: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################

Erroneous interleaving 32:
* At step 41 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  20: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  28: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  29: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  31: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  32: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  33: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  34: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  35: P.2: exits normally
  36: P.2: true = erlang:exit(P, normal)
    (while exiting)
  37: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  38: Exit signal (normal) from P.2 reaches P
  39: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
  40: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  41: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  45: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################

Erroneous interleaving 33:
* At step 40 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.161>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.161>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  19: Message ({'DOWN',#Ref<0.0.1.161>,process,P.1,normal}) from P.1 reaches P
  20: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  28: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  29: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  31: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  32: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  33: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  34: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  35: P.2: exits normally
  36: P.2: true = erlang:exit(P, normal)
    (while exiting)
  37: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  38: Exit signal (normal) from P.2 reaches P
  39: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  40: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  41: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  45: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
################################################################################

Erroneous interleaving 34:
* At step 30 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 36 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: Exit signal (normal) from P.1 reaches P
  21: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  22: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  23: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  24: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  25: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  26: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  27: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  28: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  29: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  30: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  31: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  32: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  34: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  37: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################

Erroneous interleaving 35:
* At step 30 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: Exit signal (normal) from P.1 reaches P
  21: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  22: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  23: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  24: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  25: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  26: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  27: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  28: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  29: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  30: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  31: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  32: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  34: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  35: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  36: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  37: P.2: exits normally
  38: P.2: true = erlang:exit(P, normal)
    (while exiting)
  39: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  40: Exit signal (normal) from P.2 reaches P
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################

Erroneous interleaving 36:
* At step 30 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 39 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: Exit signal (normal) from P.1 reaches P
  21: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  22: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  23: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  24: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  25: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  26: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  27: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  28: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  29: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  30: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  31: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  32: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  34: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  35: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  36: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  37: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  39: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################

Erroneous interleaving 37:
* At step 39 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: Exit signal (normal) from P.1 reaches P
  21: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  22: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  23: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  24: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  25: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  26: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  27: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  28: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  29: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  30: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  31: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  32: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  33: P.2: exits normally
  34: P.2: true = erlang:exit(P, normal)
    (while exiting)
  35: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  36: Exit signal (normal) from P.2 reaches P
  37: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
  38: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  39: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################

Erroneous interleaving 38:
* At step 38 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: Exit signal (normal) from P.1 reaches P
  21: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  22: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  23: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  24: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  25: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  26: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  27: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  28: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  29: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  30: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  31: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  32: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  33: P.2: exits normally
  34: P.2: true = erlang:exit(P, normal)
    (while exiting)
  35: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  36: Exit signal (normal) from P.2 reaches P
  37: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  38: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  39: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  40: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  42: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  43: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
################################################################################

Erroneous interleaving 39:
* At step 27 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 32 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
* At step 36 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  23: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  24: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  26: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  27: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  28: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  29: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  30: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  31: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  32: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  37: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
################################################################################

Erroneous interleaving 40:
* At step 27 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 32 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
* At step 35 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  23: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  24: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  26: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  27: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  28: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  29: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  30: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  31: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  32: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  35: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  36: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  37: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################

Erroneous interleaving 41:
* At step 27 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 39 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  23: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  24: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  26: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  27: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  28: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  29: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  30: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  32: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  33: P.2: exits normally
  34: P.2: true = erlang:exit(P, normal)
    (while exiting)
  35: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  36: Exit signal (normal) from P.2 reaches P
  37: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  39: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
################################################################################

Erroneous interleaving 42:
* At step 27 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 36 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  23: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  24: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  26: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  27: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  28: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  29: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  30: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  32: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  33: P.2: exits normally
  34: P.2: true = erlang:exit(P, normal)
    (while exiting)
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  37: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
  39: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  40: Exit signal (normal) from P.2 reaches P
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################

Erroneous interleaving 43:
* At step 27 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 35 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
* At step 39 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  23: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  24: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  26: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  27: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  28: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  29: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  30: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  32: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  33: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  34: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  35: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  36: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  37: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  39: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
################################################################################

Erroneous interleaving 44:
* At step 27 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 35 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
* At step 38 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  23: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  24: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  26: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  27: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  28: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  29: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  30: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  32: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  33: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  34: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  35: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  36: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  37: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  38: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  39: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################

Erroneous interleaving 45:
* At step 27 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 34 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
* At step 39 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  23: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  24: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  26: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  27: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  28: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  29: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  30: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  32: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  33: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  34: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  35: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
  37: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  39: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################

Erroneous interleaving 46:
* At step 36 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 41 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  23: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  24: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  26: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  27: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  28: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  29: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  30: P.2: exits normally
  31: P.2: true = erlang:exit(P, normal)
    (while exiting)
  32: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  33: Exit signal (normal) from P.2 reaches P
  34: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
  35: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  36: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  37: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  38: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  39: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  41: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
################################################################################

Erroneous interleaving 47:
* At step 35 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 41 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  23: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  24: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  26: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  27: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  28: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  29: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  30: P.2: exits normally
  31: P.2: true = erlang:exit(P, normal)
    (while exiting)
  32: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  33: Exit signal (normal) from P.2 reaches P
  34: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  35: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  36: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  37: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  39: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  41: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
################################################################################

Erroneous interleaving 48:
* At step 35 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 40 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  23: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  24: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  26: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  27: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  28: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  29: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  30: P.2: exits normally
  31: P.2: true = erlang:exit(P, normal)
    (while exiting)
  32: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  33: Exit signal (normal) from P.2 reaches P
  34: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  35: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  36: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  37: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  39: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  40: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  41: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
  43: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
################################################################################

Erroneous interleaving 49:
* At step 33 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,25}]}]
* At step 38 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
   8: P: #Ref<0.0.1.161> = erlang:monitor(process, P.1)
    in gen.erl line 155
   9: P: {'$gen_call',{P,#Ref<0.0.1.161>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.161>},stop}, [noconnect])
    in gen.erl line 166
  10: Message ({'$gen_call',{P,#Ref<0.0.1.161>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.161>},stop})
    in gen_server.erl line 382
  12: P.1: {#Ref<0.0.1.161>,ok} = P ! {#Ref<0.0.1.161>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.161>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.161>,ok})
    in gen.erl line 168
  15: P: true = erlang:demonitor(#Ref<0.0.1.161>, [flush])
    in gen.erl line 170
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2673
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 235
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 378
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 334
  23: P: #Ref<0.0.1.399> = erlang:monitor(process, P.2)
    in gen.erl line 155
  24: P: {'$gen_call',{P,#Ref<0.0.1.399>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.399>},stop}, [noconnect])
    in gen.erl line 166
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 168
  26: Message ({'$gen_call',{P,#Ref<0.0.1.399>},stop}) from P reaches P.2
  27: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.399>},stop})
    in gen_server.erl line 382
  28: P.2: {#Ref<0.0.1.399>,ok} = P ! {#Ref<0.0.1.399>,ok}
    in gen_server.erl line 241
  29: P.2: exits normally
  30: P.2: true = erlang:exit(P, normal)
    (while exiting)
  31: P.2: {'DOWN',#Ref<0.0.1.399>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.399>,process,P.2,normal})
    (while exiting)
  32: P: true = erlang:demonitor(#Ref<0.0.1.399>, [flush])
    in gen.erl line 178
  33: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  34: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  37: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  38: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  39: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
  41: Message ({#Ref<0.0.1.399>,ok}) from P.2 reaches P
  42: Exit signal (normal) from P.2 reaches P
  43: Message ({'DOWN',#Ref<0.0.1.399>,process,P.2,normal}) from P.2 reaches P
################################################################################

Warnings:
--------------------------------------------------------------------------------

Continuing after error

################################################################################

Tips:
--------------------------------------------------------------------------------

A process crashed with reason '{timeout, ...}'. This may happen when a call to a gen_server (or similar) does not receive a reply within some standard timeout. Use the '--after_timeout' option to treat after clauses that exceed some threshold as 'impossible'.
An abnormal exit signal was sent to a process. This is probably the worst thing that can happen race-wise, as any other side-effecting operation races with the arrival of the signal. If the test produces too many interleavings consider refactoring your code.
Every interleaving explored so far had some error. This can make later debugging difficult, as the generated report will include too much info. You may want to consider refactoring your code, or using the appropriate options to filter out irrelevant errors.

################################################################################

Info:
--------------------------------------------------------------------------------

Instrumented gen_server_bug
Instrumented io_lib
Instrumented gen_server
Instrumented gen
Instrumented proc_lib
Instrumented erlang
You can see pairs of racing instructions (in the report and --graph) with '--show_races true'

################################################################################

Done! (Exit status: completed)
  Summary: 49 errors, 75/75 interleavings explored
