Concuerror 0.15 ('90f4283') started at 29 Aug 2016 14:01:20.
 Options:
  [{after_timeout,infinity},
   {assertions_only,false},
   {assume_racing,false},
   {depth_bound,500},
   {entry_point,{gen_server_bug,test_without_register,[]}},
   {files,["/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"]},
   {ignore_error,[]},
   {instant_delivery,false},
   {interleaving_bound,infinity},
   {keep_going,true},
   {non_racing_system,[]},
   {optimal,true},
   {print_depth,20},
   {scheduling,round_robin},
   {scheduling_bound,infinity},
   {scheduling_bound_type,none},
   {show_races,false},
   {strict_scheduling,false},
   {symbolic_names,true},
   {timeout,infinity},
   {treat_as_normal,[]}]
################################################################################
Interleaving #1
--------------------------------------------------------------------------------
Errors found:
* At step 12 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,28}]}]
* At step 16 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  11: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 179
  12: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  13: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  14: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  15: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
  16: P.1: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  17: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  18: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P.1 reaches P
################################################################################
Interleaving #2
--------------------------------------------------------------------------------
Errors found:
* At step 12 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,28}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  11: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 179
  12: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  13: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  14: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  16: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  17: P.1: exits normally
  18: P.1: true = erlang:exit(P, normal)
    (while exiting)
  19: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  20: Exit signal (normal) from P.1 reaches P
  21: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
################################################################################
Interleaving #3
--------------------------------------------------------------------------------
Errors found:
* At step 12 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,28}]}]
* At step 19 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  11: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 179
  12: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  13: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  14: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  16: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  17: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  18: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
  19: P.1: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  20: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  21: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P.1 reaches P
################################################################################
Interleaving #4
--------------------------------------------------------------------------------
Errors found:
* At step 12 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,28}]}]
* At step 17 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  11: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 179
  12: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  13: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  14: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  15: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  16: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
  17: P.1: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  18: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  19: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P.1 reaches P
################################################################################
Interleaving #5
--------------------------------------------------------------------------------
Errors found:
* At step 21 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.1,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,28}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  11: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  12: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  13: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  14: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  15: P.1: exits normally
  16: P.1: true = erlang:exit(P, normal)
    (while exiting)
  17: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  18: Exit signal (normal) from P.1 reaches P
  19: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  20: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 179
  21: P: exits abnormally ({timeout,{gen_server,call,[P.1,stop]}})
  22: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.1,stop]}})
    (while exiting)
  23: Exit signal ({timeout,{gen_server,call,[P.1,stop]}}) from P reaches P.1
################################################################################
Interleaving #6
--------------------------------------------------------------------------------
Errors found:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 38 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  19: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  20: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  28: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  29: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  31: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  37: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  38: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  39: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #7
--------------------------------------------------------------------------------
Errors found:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  19: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  20: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  28: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  29: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  31: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  38: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  39: P.2: exits normally
  40: P.2: true = erlang:exit(P, normal)
    (while exiting)
  41: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  42: Exit signal (normal) from P.2 reaches P
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Interleaving #8
--------------------------------------------------------------------------------
Errors found:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 41 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  19: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  20: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  28: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  29: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  31: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  38: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  39: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  41: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #9
--------------------------------------------------------------------------------
Errors found:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 39 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  19: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  20: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  28: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  29: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  31: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  39: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #10
--------------------------------------------------------------------------------
Errors found:
* At step 41 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  19: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  20: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  21: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  22: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  28: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  29: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  31: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  32: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  33: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  34: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  35: P.2: exits normally
  36: P.2: true = erlang:exit(P, normal)
    (while exiting)
  37: P.2: {'DOWN',#Ref<0.0.1.451>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.451>,process,P.2,normal})
    (while exiting)
  38: Exit signal (normal) from P.2 reaches P
  39: Message ({'DOWN',#Ref<0.0.1.451>,process,P.2,normal}) from P.2 reaches P
  40: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  41: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  45: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Interleaving #14
--------------------------------------------------------------------------------
Errors found:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 38 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  28: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  29: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  31: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  37: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  38: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  39: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #15
--------------------------------------------------------------------------------
Errors found:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  28: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  29: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  31: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  38: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  39: P.2: exits normally
  40: P.2: true = erlang:exit(P, normal)
    (while exiting)
  41: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  42: Exit signal (normal) from P.2 reaches P
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Interleaving #16
--------------------------------------------------------------------------------
Errors found:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 41 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  28: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  29: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  31: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  38: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  39: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  41: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #17
--------------------------------------------------------------------------------
Errors found:
* At step 32 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 39 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  28: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  29: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  31: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  32: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  39: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #18
--------------------------------------------------------------------------------
Errors found:
* At step 41 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  23: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  24: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  25: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  26: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  27: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  28: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  29: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  30: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  31: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  32: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  33: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  34: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  35: P.2: exits normally
  36: P.2: true = erlang:exit(P, normal)
    (while exiting)
  37: P.2: {'DOWN',#Ref<0.0.1.451>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.451>,process,P.2,normal})
    (while exiting)
  38: Exit signal (normal) from P.2 reaches P
  39: Message ({'DOWN',#Ref<0.0.1.451>,process,P.2,normal}) from P.2 reaches P
  40: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  41: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  45: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Interleaving #22
--------------------------------------------------------------------------------
Errors found:
* At step 31 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 38 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  27: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  28: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  30: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  31: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  32: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  38: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  39: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #23
--------------------------------------------------------------------------------
Errors found:
* At step 31 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 37 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  27: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  28: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  30: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  31: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  32: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  38: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  39: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
  40: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
################################################################################
Interleaving #24
--------------------------------------------------------------------------------
Errors found:
* At step 31 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  27: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  28: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  30: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  31: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  32: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  38: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  39: P.2: exits normally
  40: P.2: true = erlang:exit(P, normal)
    (while exiting)
  41: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  42: Exit signal (normal) from P.2 reaches P
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Interleaving #25
--------------------------------------------------------------------------------
Errors found:
* At step 31 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 41 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  27: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  28: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  30: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  31: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  32: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  38: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  39: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  41: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #26
--------------------------------------------------------------------------------
Errors found:
* At step 31 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 39 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  27: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  28: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  30: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  31: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  32: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  37: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  39: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #27
--------------------------------------------------------------------------------
Errors found:
* At step 31 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  27: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  28: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  30: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  31: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  32: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  37: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  38: P.2: exits normally
  39: P.2: true = erlang:exit(P, normal)
    (while exiting)
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  41: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  42: Exit signal (normal) from P.2 reaches P
  43: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
################################################################################
Interleaving #28
--------------------------------------------------------------------------------
Errors found:
* At step 31 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 39 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  27: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  28: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  30: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  31: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  32: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  37: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  39: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  42: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
  43: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
################################################################################
Interleaving #29
--------------------------------------------------------------------------------
Errors found:
* At step 31 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 38 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  27: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  28: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  30: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  31: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  32: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  37: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  38: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  39: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
  41: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
################################################################################
Interleaving #30
--------------------------------------------------------------------------------
Errors found:
* At step 41 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  27: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  28: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  30: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  31: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  32: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  33: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  34: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  35: P.2: exits normally
  36: P.2: true = erlang:exit(P, normal)
    (while exiting)
  37: P.2: {'DOWN',#Ref<0.0.1.451>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.451>,process,P.2,normal})
    (while exiting)
  38: Exit signal (normal) from P.2 reaches P
  39: Message ({'DOWN',#Ref<0.0.1.451>,process,P.2,normal}) from P.2 reaches P
  40: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  41: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  45: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Interleaving #31
--------------------------------------------------------------------------------
Errors found:
* At step 41 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  27: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  28: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  30: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  32: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  33: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  34: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
  35: P.2: exits normally
  36: P.2: true = erlang:exit(P, normal)
    (while exiting)
  37: P.2: {'DOWN',#Ref<0.0.1.451>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.451>,process,P.2,normal})
    (while exiting)
  38: Exit signal (normal) from P.2 reaches P
  39: Message ({'DOWN',#Ref<0.0.1.451>,process,P.2,normal}) from P.2 reaches P
  40: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  41: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  45: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Interleaving #32
--------------------------------------------------------------------------------
Errors found:
* At step 40 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P.1: exits normally
  15: P.1: true = erlang:exit(P, normal)
    (while exiting)
  16: P.1: {'DOWN',#Ref<0.0.1.195>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.195>,process,P.1,normal})
    (while exiting)
  17: Exit signal (normal) from P.1 reaches P
  18: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  19: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  20: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  21: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  22: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  23: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  24: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  25: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  26: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  27: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  28: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  29: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  30: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  32: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  33: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  34: P.2: exits normally
  35: P.2: true = erlang:exit(P, normal)
    (while exiting)
  36: P.2: {'DOWN',#Ref<0.0.1.451>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.451>,process,P.2,normal})
    (while exiting)
  37: Exit signal (normal) from P.2 reaches P
  38: Message ({'DOWN',#Ref<0.0.1.451>,process,P.2,normal}) from P.2 reaches P
  39: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  40: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  41: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  44: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  45: Message ({'DOWN',#Ref<0.0.1.195>,process,P.1,normal}) from P.1 reaches P
################################################################################
Interleaving #40
--------------------------------------------------------------------------------
Errors found:
* At step 30 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 36 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  15: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: Exit signal (normal) from P.1 reaches P
  21: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  22: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  23: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  24: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  25: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  26: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  27: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  28: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  29: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  30: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  31: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  32: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  34: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  37: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #41
--------------------------------------------------------------------------------
Errors found:
* At step 30 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  15: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: Exit signal (normal) from P.1 reaches P
  21: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  22: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  23: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  24: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  25: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  26: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  27: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  28: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  29: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  30: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  31: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  32: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  34: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  35: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  36: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  37: P.2: exits normally
  38: P.2: true = erlang:exit(P, normal)
    (while exiting)
  39: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  40: Exit signal (normal) from P.2 reaches P
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Interleaving #42
--------------------------------------------------------------------------------
Errors found:
* At step 30 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 39 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  15: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: Exit signal (normal) from P.1 reaches P
  21: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  22: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  23: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  24: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  25: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  26: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  27: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  28: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  29: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  30: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  31: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  32: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  34: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  35: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  36: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  37: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  39: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #43
--------------------------------------------------------------------------------
Errors found:
* At step 30 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 37 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  15: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: Exit signal (normal) from P.1 reaches P
  21: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  22: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  23: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  24: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  25: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  26: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  27: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  28: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  29: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  30: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  31: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  32: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  33: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  34: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  35: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  37: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  38: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  39: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #44
--------------------------------------------------------------------------------
Errors found:
* At step 39 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  15: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  18: P.1: exits normally
  19: P.1: true = erlang:exit(P, normal)
    (while exiting)
  20: Exit signal (normal) from P.1 reaches P
  21: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  22: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  23: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  24: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  25: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  26: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  27: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  28: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  29: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  30: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  31: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  32: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  33: P.2: exits normally
  34: P.2: true = erlang:exit(P, normal)
    (while exiting)
  35: P.2: {'DOWN',#Ref<0.0.1.451>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.451>,process,P.2,normal})
    (while exiting)
  36: Exit signal (normal) from P.2 reaches P
  37: Message ({'DOWN',#Ref<0.0.1.451>,process,P.2,normal}) from P.2 reaches P
  38: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  39: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  42: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Interleaving #48
--------------------------------------------------------------------------------
Errors found:
* At step 27 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 32 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
* At step 36 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  15: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  23: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  24: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  26: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  27: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  28: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  29: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  30: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  31: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  32: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  33: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  34: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  37: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
################################################################################
Interleaving #49
--------------------------------------------------------------------------------
Errors found:
* At step 27 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 39 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  15: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  23: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  24: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  26: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  27: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  28: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  29: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  30: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  32: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  33: P.2: exits normally
  34: P.2: true = erlang:exit(P, normal)
    (while exiting)
  35: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  36: Exit signal (normal) from P.2 reaches P
  37: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  39: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
################################################################################
Interleaving #50
--------------------------------------------------------------------------------
Errors found:
* At step 27 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 36 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  15: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  23: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  24: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  26: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  27: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  28: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  29: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  30: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  32: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  33: P.2: exits normally
  34: P.2: true = erlang:exit(P, normal)
    (while exiting)
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  36: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  37: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
  39: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  40: Exit signal (normal) from P.2 reaches P
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
################################################################################
Interleaving #51
--------------------------------------------------------------------------------
Errors found:
* At step 27 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 35 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
* At step 39 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  15: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  23: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  24: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  26: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  27: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  28: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  29: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  30: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  32: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  33: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  34: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  35: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  36: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  37: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  39: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
################################################################################
Interleaving #52
--------------------------------------------------------------------------------
Errors found:
* At step 27 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 34 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
* At step 39 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  15: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  23: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  24: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  26: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  27: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  28: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  29: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  30: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  32: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  33: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  34: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  35: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
  37: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  38: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  39: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  40: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  41: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
################################################################################
Interleaving #53
--------------------------------------------------------------------------------
Errors found:
* At step 27 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 33 process P.2 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
* At step 37 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  15: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  23: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  24: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  26: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  27: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  28: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  29: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  30: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  31: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  32: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  33: P.2: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  34: P.2: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  35: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.2 reaches P
  36: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  37: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  38: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  39: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
################################################################################
Interleaving #54
--------------------------------------------------------------------------------
Errors found:
* At step 36 process P exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      [{gen_server,call,2,[{file,"gen_server.erl"},{line,204}]},
       {gen_server_bug,test_without_register,0,
                       [{file,"/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/gen_server_bug.erl"},
                        {line,30}]}]
* At step 41 process P.1 exited abnormally
    Reason:
      {timeout,{gen_server,call,[P.2,stop]}}
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
   2: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
   3: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   4: P.1: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
   5: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 385
   6: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
   7: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 341
   8: P: #Ref<0.0.1.195> = erlang:monitor(process, P.1)
    in gen.erl line 156
   9: P: {'$gen_call',{P,#Ref<0.0.1.195>},stop} = erlang:send(P.1, {'$gen_call',{P,#Ref<0.0.1.195>},stop}, [noconnect])
    in gen.erl line 167
  10: Message ({'$gen_call',{P,#Ref<0.0.1.195>},stop}) from P reaches P.1
  11: P.1: receives message ({'$gen_call',{P,#Ref<0.0.1.195>},stop})
    in gen_server.erl line 368
  12: P.1: {#Ref<0.0.1.195>,ok} = P ! {#Ref<0.0.1.195>,ok}
    in gen_server.erl line 241
  13: Message ({#Ref<0.0.1.195>,ok}) from P.1 reaches P
  14: P: receives message ({#Ref<0.0.1.195>,ok})
    in gen.erl line 169
  15: P: true = erlang:demonitor(#Ref<0.0.1.195>, [flush])
    in gen.erl line 171
  16: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 681
  17: P: P.2 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,gen_server_bug,[],[]]],[link]})
    in erlang.erl line 2784
  18: P.2: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
  19: P.2: undefined = erlang:put('$initial_call', {gen_server_bug,init,1})
    in proc_lib.erl line 242
  20: P.2: {ack,P.2,{ok,P.2}} = P ! {ack,P.2,{ok,P.2}}
    in proc_lib.erl line 385
  21: Message ({ack,P.2,{ok,P.2}}) from P.2 reaches P
  22: P: receives message ({ack,P.2,{ok,P.2}})
    in proc_lib.erl line 341
  23: P: #Ref<0.0.1.451> = erlang:monitor(process, P.2)
    in gen.erl line 156
  24: P: {'$gen_call',{P,#Ref<0.0.1.451>},stop} = erlang:send(P.2, {'$gen_call',{P,#Ref<0.0.1.451>},stop}, [noconnect])
    in gen.erl line 167
  25: P: receive timeout expired after 5000 ms
    in gen.erl line 169
  26: Message ({'$gen_call',{P,#Ref<0.0.1.451>},stop}) from P reaches P.2
  27: P.2: receives message ({'$gen_call',{P,#Ref<0.0.1.451>},stop})
    in gen_server.erl line 368
  28: P.2: {#Ref<0.0.1.451>,ok} = P ! {#Ref<0.0.1.451>,ok}
    in gen_server.erl line 241
  29: Message ({#Ref<0.0.1.451>,ok}) from P.2 reaches P
  30: P.2: exits normally
  31: P.2: true = erlang:exit(P, normal)
    (while exiting)
  32: P.2: {'DOWN',#Ref<0.0.1.451>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.1.451>,process,P.2,normal})
    (while exiting)
  33: Exit signal (normal) from P.2 reaches P
  34: Message ({'DOWN',#Ref<0.0.1.451>,process,P.2,normal}) from P.2 reaches P
  35: P: true = erlang:demonitor(#Ref<0.0.1.451>, [flush])
    in gen.erl line 179
  36: P: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  37: P: true = erlang:exit(P.1, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  38: P: true = erlang:exit(P.2, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  39: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.2
  40: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P reaches P.1
  41: P.1: exits abnormally ({timeout,{gen_server,call,[P.2,stop]}})
  42: P.1: true = erlang:exit(P, {timeout,{gen_server,call,[P.2,stop]}})
    (while exiting)
  43: Exit signal ({timeout,{gen_server,call,[P.2,stop]}}) from P.1 reaches P
################################################################################
Exploration completed!
################################################################################
Tips:
--------------------------------------------------------------------------------
A process crashed with reason '{timeout, ...}'. This may happen when a call to a gen_server (or similar) does not receive a reply within some standard timeout. Use the '--after_timeout' option to treat after clauses that exceed some threshold as 'impossible'.
An abnormal exit signal was sent to a process. This is probably the worst thing that can happen race-wise, as any other side-effecting operation races with the arrival of the signal. If the test produces too many interleavings consider refactoring your code.
Each of the first 10 interleavings explored so far had some error. This can make later debugging difficult, as the generated report will include too much info. Consider refactoring your code, or using the appropriate options to filter out irrelevant errors.

################################################################################
Info:
--------------------------------------------------------------------------------
Instrumented gen_server_bug
Instrumented io_lib
Instrumented gen_server
Instrumented gen
Instrumented proc_lib
Instrumented erlang
You can see pairs of racing instructions (in the report and --graph) with '--show_races true'
Continuing after error (-k)

################################################################################
Done at 29 Aug 2016 14:01:21 (Exit status: error)
  Summary: 38 errors, 54/54 interleavings explored
