################################################################################
Concuerror started with options:
  [{after_timeout,infinity},
   {assume_racing,false},
   {delay_bound,infinity},
   {depth_bound,5000},
   {entry_point,{many_monitors,many_monitors,[]}},
   {files,["/home/stavros/git/Concuerror/tests/suites/basic_tests/src/many_monitors.erl"]},
   {ignore_error,[]},
   {ignore_first_crash,true},
   {instant_delivery,false},
   {non_racing_system,[]},
   {optimal,true},
   {print_depth,20},
   {quiet,true},
   {scheduling,round_robin},
   {show_races,false},
   {strict_scheduling,false},
   {symbolic_names,true},
   {timeout,infinity},
   {treat_as_normal,[]}]
################################################################################
Erroneous interleaving 1:
* Blocked at a 'receive' (when all other processes have exited):
    P in many_monitors.erl line 13
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<many_monitors.0.86058473>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<many_monitors.1.86058473>,[]])
    in erlang.erl line 2329
   3: P: #Ref<0.0.0.125> = erlang:monitor(process, P.1)
    in many_monitors.erl line 11
   4: P: #Ref<0.0.0.127> = erlang:monitor(process, P.2)
    in many_monitors.erl line 12
   5: P.1: exits normally
   6: P.1: {'DOWN',#Ref<0.0.0.125>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.125>,process,P.1,normal})
    (while exiting)
   7: Message ({'DOWN',#Ref<0.0.0.125>,process,P.1,normal}) from P.1 reaches P
   8: P.2: exits normally
   9: P.2: {'DOWN',#Ref<0.0.0.127>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.127>,process,P.2,normal})
    (while exiting)
  10: Message ({'DOWN',#Ref<0.0.0.127>,process,P.2,normal}) from P.2 reaches P
################################################################################
Erroneous interleaving 2:
* Blocked at a 'receive' (when all other processes have exited):
    P in many_monitors.erl line 13
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<many_monitors.0.86058473>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<many_monitors.1.86058473>,[]])
    in erlang.erl line 2329
   3: P: #Ref<0.0.0.125> = erlang:monitor(process, P.1)
    in many_monitors.erl line 11
   4: P: #Ref<0.0.0.127> = erlang:monitor(process, P.2)
    in many_monitors.erl line 12
   5: P.1: exits normally
   6: P.1: {'DOWN',#Ref<0.0.0.125>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.125>,process,P.1,normal})
    (while exiting)
   7: P.2: exits normally
   8: P.2: {'DOWN',#Ref<0.0.0.127>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.127>,process,P.2,normal})
    (while exiting)
   9: Message ({'DOWN',#Ref<0.0.0.127>,process,P.2,normal}) from P.2 reaches P
  10: Message ({'DOWN',#Ref<0.0.0.125>,process,P.1,normal}) from P.1 reaches P
################################################################################
Erroneous interleaving 3:
* Blocked at a 'receive' (when all other processes have exited):
    P in many_monitors.erl line 13
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<many_monitors.0.86058473>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<many_monitors.1.86058473>,[]])
    in erlang.erl line 2329
   3: P: #Ref<0.0.0.125> = erlang:monitor(process, P.1)
    in many_monitors.erl line 11
   4: P.1: exits normally
   5: P.1: {'DOWN',#Ref<0.0.0.125>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.125>,process,P.1,normal})
    (while exiting)
   6: Message ({'DOWN',#Ref<0.0.0.125>,process,P.1,normal}) from P.1 reaches P
   7: P.2: exits normally
   8: P: #Ref<0.0.0.168> = erlang:monitor(process, P.2)
    in many_monitors.erl line 12
################################################################################
Erroneous interleaving 4:
* Blocked at a 'receive' (when all other processes have exited):
    P in many_monitors.erl line 13
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<many_monitors.0.86058473>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<many_monitors.1.86058473>,[]])
    in erlang.erl line 2329
   3: P: #Ref<0.0.0.125> = erlang:monitor(process, P.1)
    in many_monitors.erl line 11
   4: P.1: exits normally
   5: P.1: {'DOWN',#Ref<0.0.0.125>,process,P.1,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.125>,process,P.1,normal})
    (while exiting)
   6: P.2: exits normally
   7: P: #Ref<0.0.0.185> = erlang:monitor(process, P.2)
    in many_monitors.erl line 12
   8: Message ({'DOWN',#Ref<0.0.0.125>,process,P.1,normal}) from P.1 reaches P
################################################################################
Erroneous interleaving 5:
* Blocked at a 'receive' (when all other processes have exited):
    P in many_monitors.erl line 13
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<many_monitors.0.86058473>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<many_monitors.1.86058473>,[]])
    in erlang.erl line 2329
   3: P.1: exits normally
   4: P.2: exits normally
   5: P: #Ref<0.0.0.205> = erlang:monitor(process, P.1)
    in many_monitors.erl line 11
   6: P: #Ref<0.0.0.209> = erlang:monitor(process, P.2)
    in many_monitors.erl line 12
################################################################################
Erroneous interleaving 6:
* Blocked at a 'receive' (when all other processes have exited):
    P in many_monitors.erl line 13
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<many_monitors.0.86058473>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<many_monitors.1.86058473>,[]])
    in erlang.erl line 2329
   3: P.1: exits normally
   4: P: #Ref<0.0.0.205> = erlang:monitor(process, P.1)
    in many_monitors.erl line 11
   5: P: #Ref<0.0.0.223> = erlang:monitor(process, P.2)
    in many_monitors.erl line 12
   6: P.2: exits normally
   7: P.2: {'DOWN',#Ref<0.0.0.223>,process,P.2,normal} = erlang:send(P, {'DOWN',#Ref<0.0.0.223>,process,P.2,normal})
    (while exiting)
   8: Message ({'DOWN',#Ref<0.0.0.223>,process,P.2,normal}) from P.2 reaches P
################################################################################
Concuerror Info:
--------------------------------------------------------------------------------
Instrumented: many_monitors
Instrumented: io_lib
Instrumented: gen_server
Hijacked application_controller
Instrumented: erlang
################################################################################
Done! (Exit status: completed)
  Summary: 6 errors, 6/6 interleavings explored
