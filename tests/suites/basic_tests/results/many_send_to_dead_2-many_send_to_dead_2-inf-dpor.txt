################################################################################
Concuerror started with options:
  [{after_timeout,infinity},
   {assume_racing,false},
   {delay_bound,infinity},
   {depth_bound,5000},
   {entry_point,{many_send_to_dead_2,many_send_to_dead_2,[]}},
   {files,["/home/stavros/git/Concuerror/tests/suites/basic_tests/src/many_send_to_dead_2.erl"]},
   {ignore_error,[]},
   {ignore_first_crash,true},
   {instant_delivery,false},
   {non_racing_system,[]},
   {optimal,true},
   {print_depth,20},
   {quiet,true},
   {scheduling,round_robin},
   {show_races,false},
   {strict_scheduling,false},
   {symbolic_names,true},
   {timeout,infinity},
   {treat_as_normal,[]}]
################################################################################
Erroneous interleaving 1:
* Blocked at a 'receive' (when all other processes have exited):
    P in many_send_to_dead_2.erl line 16
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.0.61333171>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.1.61333171>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.2.61333171>,[]])
    in erlang.erl line 2329
   4: P.1: receive timeout expired after 0 ms
    in many_send_to_dead_2.erl line 11
   5: P.1: receive timeout expired after 0 ms
    in many_send_to_dead_2.erl line 12
   6: P.1: exits normally
   7: P.2: msg1 = P.1 ! msg1
    in many_send_to_dead_2.erl line 14
   8: P.2: exits normally
   9: Message (msg1) from P.2 reaches P.1
  10: P.3: msg2 = P.1 ! msg2
    in many_send_to_dead_2.erl line 15
  11: P.3: exits normally
  12: Message (msg2) from P.3 reaches P.1
################################################################################
Erroneous interleaving 2:
* Blocked at a 'receive' (when all other processes have exited):
    P in many_send_to_dead_2.erl line 16
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.0.61333171>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.1.61333171>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.2.61333171>,[]])
    in erlang.erl line 2329
   4: P.1: receive timeout expired after 0 ms
    in many_send_to_dead_2.erl line 11
   5: P.1: receive timeout expired after 0 ms
    in many_send_to_dead_2.erl line 12
   6: P.1: exits normally
   7: P.2: msg1 = P.1 ! msg1
    in many_send_to_dead_2.erl line 14
   8: P.2: exits normally
   9: P.3: msg2 = P.1 ! msg2
    in many_send_to_dead_2.erl line 15
  10: P.3: exits normally
  11: Message (msg2) from P.3 reaches P.1
  12: Message (msg1) from P.2 reaches P.1
################################################################################
Erroneous interleaving 3:
* Blocked at a 'receive' (when all other processes have exited):
    P in many_send_to_dead_2.erl line 16
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.0.61333171>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.1.61333171>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.2.61333171>,[]])
    in erlang.erl line 2329
   4: P.1: receive timeout expired after 0 ms
    in many_send_to_dead_2.erl line 11
   5: P.2: msg1 = P.1 ! msg1
    in many_send_to_dead_2.erl line 14
   6: P.2: exits normally
   7: P.3: msg2 = P.1 ! msg2
    in many_send_to_dead_2.erl line 15
   8: P.3: exits normally
   9: Message (msg1) from P.2 reaches P.1
  10: Message (msg2) from P.3 reaches P.1
  11: P.1: receives message (msg1)
    in many_send_to_dead_2.erl line 12
  12: P.1: exits normally
################################################################################
Erroneous interleaving 4:
* Blocked at a 'receive' (when all other processes have exited):
    P in many_send_to_dead_2.erl line 16
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.0.61333171>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.1.61333171>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.2.61333171>,[]])
    in erlang.erl line 2329
   4: P.1: receive timeout expired after 0 ms
    in many_send_to_dead_2.erl line 11
   5: P.2: msg1 = P.1 ! msg1
    in many_send_to_dead_2.erl line 14
   6: P.2: exits normally
   7: P.3: msg2 = P.1 ! msg2
    in many_send_to_dead_2.erl line 15
   8: P.3: exits normally
   9: Message (msg2) from P.3 reaches P.1
  10: P.1: receives message (msg2)
    in many_send_to_dead_2.erl line 12
  11: P.1: exits normally
  12: Message (msg1) from P.2 reaches P.1
################################################################################
Erroneous interleaving 5:
* Blocked at a 'receive' (when all other processes have exited):
    P in many_send_to_dead_2.erl line 16
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.0.61333171>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.1.61333171>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.2.61333171>,[]])
    in erlang.erl line 2329
   4: P.2: msg1 = P.1 ! msg1
    in many_send_to_dead_2.erl line 14
   5: P.2: exits normally
   6: P.3: msg2 = P.1 ! msg2
    in many_send_to_dead_2.erl line 15
   7: P.3: exits normally
   8: Message (msg1) from P.2 reaches P.1
   9: Message (msg2) from P.3 reaches P.1
  10: P.1: receives message (msg1)
    in many_send_to_dead_2.erl line 11
  11: P.1: receives message (msg2)
    in many_send_to_dead_2.erl line 12
  12: P.1: exits normally
################################################################################
Erroneous interleaving 6:
* Blocked at a 'receive' (when all other processes have exited):
    P in many_send_to_dead_2.erl line 16
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.0.61333171>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.1.61333171>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.2.61333171>,[]])
    in erlang.erl line 2329
   4: P.2: msg1 = P.1 ! msg1
    in many_send_to_dead_2.erl line 14
   5: P.2: exits normally
   6: P.3: msg2 = P.1 ! msg2
    in many_send_to_dead_2.erl line 15
   7: P.3: exits normally
   8: Message (msg1) from P.2 reaches P.1
   9: P.1: receives message (msg1)
    in many_send_to_dead_2.erl line 11
  10: P.1: receive timeout expired after 0 ms
    in many_send_to_dead_2.erl line 12
  11: P.1: exits normally
  12: Message (msg2) from P.3 reaches P.1
################################################################################
Erroneous interleaving 7:
* Blocked at a 'receive' (when all other processes have exited):
    P in many_send_to_dead_2.erl line 16
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.0.61333171>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.1.61333171>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.2.61333171>,[]])
    in erlang.erl line 2329
   4: P.2: msg1 = P.1 ! msg1
    in many_send_to_dead_2.erl line 14
   5: P.2: exits normally
   6: P.3: msg2 = P.1 ! msg2
    in many_send_to_dead_2.erl line 15
   7: P.3: exits normally
   8: Message (msg2) from P.3 reaches P.1
   9: P.1: receives message (msg2)
    in many_send_to_dead_2.erl line 11
  10: P.1: receive timeout expired after 0 ms
    in many_send_to_dead_2.erl line 12
  11: P.1: exits normally
  12: Message (msg1) from P.2 reaches P.1
################################################################################
Erroneous interleaving 8:
* Blocked at a 'receive' (when all other processes have exited):
    P in many_send_to_dead_2.erl line 16
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.0.61333171>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.1.61333171>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<many_send_to_dead_2.2.61333171>,[]])
    in erlang.erl line 2329
   4: P.2: msg1 = P.1 ! msg1
    in many_send_to_dead_2.erl line 14
   5: P.2: exits normally
   6: P.3: msg2 = P.1 ! msg2
    in many_send_to_dead_2.erl line 15
   7: P.3: exits normally
   8: Message (msg2) from P.3 reaches P.1
   9: P.1: receives message (msg2)
    in many_send_to_dead_2.erl line 11
  10: Message (msg1) from P.2 reaches P.1
  11: P.1: receives message (msg1)
    in many_send_to_dead_2.erl line 12
  12: P.1: exits normally
################################################################################
Concuerror Info:
--------------------------------------------------------------------------------
Instrumented: many_send_to_dead_2
Instrumented: io_lib
Instrumented: gen_server
Hijacked application_controller
Instrumented: erlang
################################################################################
Done! (Exit status: completed)
  Summary: 8 errors, 8/8 interleavings explored
