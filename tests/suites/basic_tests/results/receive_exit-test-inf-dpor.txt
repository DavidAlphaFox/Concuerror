################################################################################

Concuerror started with options:
  [{after_timeout,infinity},
   {assume_racing,false},
   {depth_bound,5000},
   {entry_point,{receive_exit,test,[]}},
   {files,["/home/stavros/git/Concuerror/tests/suites/basic_tests/src/receive_exit.erl"]},
   {ignore_error,[]},
   {instant_delivery,true},
   {interleaving_bound,infinity},
   {keep_going,true},
   {non_racing_system,[]},
   {optimal,true},
   {print_depth,20},
   {scheduling,round_robin},
   {scheduling_bound,infinity},
   {scheduling_bound_type,none},
   {show_races,false},
   {strict_scheduling,false},
   {symbolic_names,true},
   {timeout,infinity},
   {treat_as_normal,[]}]
################################################################################

Erroneous interleaving 1:
* At step 10 process P.1 exited abnormally
    Reason:
      die
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-0-'.0>,[]])
    in erlang.erl line 2510
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-1-'.0>,[]])
    in erlang.erl line 2510
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-2-'.0>,[]])
    in erlang.erl line 2510
   4: P: exits normally
   5: P.2: bar = P.1 ! bar
    in receive_exit.erl line 26
   6: P.2: exits normally
   7: P.3: foo = P.1 ! foo
    in receive_exit.erl line 27
   8: P.3: true = erlang:exit(P.1, die)
    in receive_exit.erl line 27
   9: P.3: exits normally
  10: P.1: exits abnormally (die)
################################################################################

Erroneous interleaving 2:
* At step 12 process P.1 exited abnormally
    Reason:
      die
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-0-'.0>,[]])
    in erlang.erl line 2510
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-1-'.0>,[]])
    in erlang.erl line 2510
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-2-'.0>,[]])
    in erlang.erl line 2510
   4: P: exits normally
   5: P.2: bar = P.1 ! bar
    in receive_exit.erl line 26
   6: P.2: exits normally
   7: P.3: foo = P.1 ! foo
    in receive_exit.erl line 27
   8: P.1: receives message (foo)
    in receive_exit.erl line 21
   9: P.1: receives message (bar)
    in receive_exit.erl line 22
  10: P.3: true = erlang:exit(P.1, die)
    in receive_exit.erl line 27
  11: P.3: exits normally
  12: P.1: exits abnormally (die)
################################################################################

Erroneous interleaving 3:
* At step 8 process P.1 exited abnormally
    Reason:
      die
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-0-'.0>,[]])
    in erlang.erl line 2510
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-1-'.0>,[]])
    in erlang.erl line 2510
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-2-'.0>,[]])
    in erlang.erl line 2510
   4: P: exits normally
   5: P.3: foo = P.1 ! foo
    in receive_exit.erl line 27
   6: P.3: true = erlang:exit(P.1, die)
    in receive_exit.erl line 27
   7: P.3: exits normally
   8: P.1: exits abnormally (die)
   9: P.2: bar = P.1 ! bar
    in receive_exit.erl line 26
  10: P.2: exits normally
################################################################################

Erroneous interleaving 4:
* At step 11 process P.1 exited abnormally
    Reason:
      die
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-0-'.0>,[]])
    in erlang.erl line 2510
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-1-'.0>,[]])
    in erlang.erl line 2510
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-2-'.0>,[]])
    in erlang.erl line 2510
   4: P: exits normally
   5: P.3: foo = P.1 ! foo
    in receive_exit.erl line 27
   6: P.1: receives message (foo)
    in receive_exit.erl line 21
   7: P.2: bar = P.1 ! bar
    in receive_exit.erl line 26
   8: P.2: exits normally
   9: P.3: true = erlang:exit(P.1, die)
    in receive_exit.erl line 27
  10: P.3: exits normally
  11: P.1: exits abnormally (die)
################################################################################

Erroneous interleaving 5:
* At step 12 process P.1 exited abnormally
    Reason:
      die
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-0-'.0>,[]])
    in erlang.erl line 2510
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-1-'.0>,[]])
    in erlang.erl line 2510
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-2-'.0>,[]])
    in erlang.erl line 2510
   4: P: exits normally
   5: P.3: foo = P.1 ! foo
    in receive_exit.erl line 27
   6: P.1: receives message (foo)
    in receive_exit.erl line 21
   7: P.2: bar = P.1 ! bar
    in receive_exit.erl line 26
   8: P.2: exits normally
   9: P.1: receives message (bar)
    in receive_exit.erl line 22
  10: P.3: true = erlang:exit(P.1, die)
    in receive_exit.erl line 27
  11: P.3: exits normally
  12: P.1: exits abnormally (die)
################################################################################

Erroneous interleaving 6:
* At step 9 process P.1 exited abnormally
    Reason:
      die
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-0-'.0>,[]])
    in erlang.erl line 2510
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-1-'.0>,[]])
    in erlang.erl line 2510
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<receive_exit.'-test/0-fun-2-'.0>,[]])
    in erlang.erl line 2510
   4: P: exits normally
   5: P.3: foo = P.1 ! foo
    in receive_exit.erl line 27
   6: P.1: receives message (foo)
    in receive_exit.erl line 21
   7: P.3: true = erlang:exit(P.1, die)
    in receive_exit.erl line 27
   8: P.3: exits normally
   9: P.1: exits abnormally (die)
  10: P.2: bar = P.1 ! bar
    in receive_exit.erl line 26
  11: P.2: exits normally
################################################################################

Warnings:
--------------------------------------------------------------------------------

Continuing after error

################################################################################

Tips:
--------------------------------------------------------------------------------

An abnormal exit signal was sent to a process. This is probably the worst thing that can happen race-wise, as any other side-effecting operation races with the arrival of the signal. If the test produces too many interleavings consider refactoring your code.

################################################################################

Info:
--------------------------------------------------------------------------------

Instrumented receive_exit
Instrumented io_lib
Instrumented erlang
You can see pairs of racing instructions (in the report and --graph) with '--show_races true'

################################################################################

Done! (Exit status: completed)
  Summary: 6 errors, 6/6 interleavings explored
