################################################################################
Concuerror started with options:
  [{after_timeout,1000},
   {assume_racing,false},
   {delay_bound,infinity},
   {depth_bound,5000},
   {entry_point,{test,t_reg_or_locate2,[]}},
   {files,["../test.erl"]},
   {ignore_error,[deadlock]},
   {ignore_first_crash,true},
   {instant_delivery,false},
   {non_racing_system,[]},
   {optimal,true},
   {print_depth,20},
   {quiet,true},
   {scheduling,round_robin},
   {show_races,true},
   {strict_scheduling,false},
   {symbolic_names,true},
   {timeout,infinity},
   {treat_as_normal,[shutdown]}]
################################################################################
Erroneous interleaving 1:
* At step 118 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 284
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2507
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 234
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 287
   7: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   8: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   9: Message ({init,error}) from init reaches P.1
  10: P.1: receives message ({init,error})
    in init.erl line 146
  11: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 242
  12: P.1: user = erlang:group_leader()
    in application.erl line 326
  13: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  14: P.1: user = erlang:group_leader()
    in application.erl line 326
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  16: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  17: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  18: P.1: user = erlang:group_leader()
    in application.erl line 326
  19: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  20: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 284
  21: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  22: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2507
  23: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  24: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 234
  25: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 287
  26: P.1.1: {P.1.1,{get_argument,generic_debug}} = init ! {P.1.1,{get_argument,generic_debug}}
    in init.erl line 145
  27: Message ({P.1.1,{get_argument,generic_debug}}) from P.1.1 reaches init
  28: Message ({init,error}) from init reaches P.1.1
  29: P.1.1: receives message ({init,error})
    in init.erl line 146
  30: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  31: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 377
  32: Message ({ack,P.1.1,{ok,P.1.1}}) from P.1.1 reaches P.1
  33: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 333
  34: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  35: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  36: P.1: undefined = ets:info(gproc_monitor, owner)
  37: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  38: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  39: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 90
  40: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  41: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  42: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 234
  43: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  44: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  45: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 377
  46: Message ({ack,P.1.2,{ok,P.1.2}}) from P.1.2 reaches P.1
  47: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 333
  48: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  49: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  50: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  51: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 284
  52: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  53: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2507
  54: Message ({'ETS-TRANSFER',249880,P.1,[]}) from P.1 reaches P.1.2
  55: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  56: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  57: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 234
  58: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 287
  59: P.1.3: {P.1.3,{get_argument,generic_debug}} = init ! {P.1.3,{get_argument,generic_debug}}
    in init.erl line 145
  60: Message ({P.1.3,{get_argument,generic_debug}}) from P.1.3 reaches init
  61: Message ({init,error}) from init reaches P.1.3
  62: P.1.3: receives message ({init,error})
    in init.erl line 146
  63: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 377
  64: Message ({ack,P.1.3,{ok,P.1.3}}) from P.1.3 reaches P.1
  65: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 333
  66: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  67: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  68: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 284
  69: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  70: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2507
  71: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  72: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  73: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 234
  74: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 287
  75: P.1.4: {P.1.4,{get_argument,generic_debug}} = init ! {P.1.4,{get_argument,generic_debug}}
    in init.erl line 145
  76: Message ({P.1.4,{get_argument,generic_debug}}) from P.1.4 reaches init
  77: Message ({init,error}) from init reaches P.1.4
  78: P.1.4: receives message ({init,error})
    in init.erl line 146
  79: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 377
  80: Message ({ack,P.1.4,{ok,P.1.4}}) from P.1.4 reaches P.1
  81: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 333
  82: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  83: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  84: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  85: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  86: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  87: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  88: P: {P.2,#Ref<0.0.0.559>} = erlang:spawn_opt({erlang,apply,[#Fun<test.8.48157746>,[]],[monitor]})
    in erlang.erl line 2373
  89: P.2: #Ref<0.0.0.562> = erlang:monitor(process, P)
    in test.erl line 36
  90: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 157
  91: P.2: #Ref<0.0.0.567> = erlang:monitor(process, P.1.1)
    in gen.erl line 200
  92: P.2: {'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 211
  93: Message ({'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}}) from P.2 reaches P.1.1
  94: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 360
  95: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  96: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  97: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  98: P.1.1: #Ref<0.0.0.583> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  99: P.1.1: {#Ref<0.0.0.567>,true} = P.2 ! {#Ref<0.0.0.567>,true}
    in gen_server.erl line 219
 100: Message ({#Ref<0.0.0.567>,true}) from P.1.1 reaches P.2
 101: P.2: receives message ({#Ref<0.0.0.567>,true})
    in gen.erl line 213
 102: P.2: true = erlang:demonitor(#Ref<0.0.0.567>, [flush])
    in gen.erl line 215
 103: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 38
 104: Message ({P.2,ok}) from P.2 reaches P
 105: P: receives message ({P.2,ok})
    in test.erl line 43
 106: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 157
 107: P: #Ref<0.0.0.604> = erlang:monitor(process, P.1.1)
    in gen.erl line 200
 108: P: {'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 211
 109: Message ({'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}}) from P reaches P.1.1
 110: P.1.1: receives message ({'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 360
 111: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
 112: P.1.1: {#Ref<0.0.0.604>,{P.2,the_value}} = P ! {#Ref<0.0.0.604>,{P.2,the_value}}
    in gen_server.erl line 219
 113: Message ({#Ref<0.0.0.604>,{P.2,the_value}}) from P.1.1 reaches P
 114: P: receives message ({#Ref<0.0.0.604>,{P.2,the_value}})
    in gen.erl line 213
 115: P: true = erlang:demonitor(#Ref<0.0.0.604>, [flush])
    in gen.erl line 215
 116: P: true = erlang:exit(P.2, kill)
    in test.erl line 45
 117: Exit signal (kill) from P reaches P.2
 118: P.2: exits abnormally (killed)
 119: P.2: {'DOWN',#Ref<0.0.0.559>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.0.0.559>,process,P.2,killed})
    (while exiting)
 120: P.2: {'DOWN',#Ref<0.0.0.583>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.0.0.583>,process,P.2,killed})
    (while exiting)
 121: Message ({'DOWN',#Ref<0.0.0.559>,process,P.2,killed}) from P.2 reaches P
 122: Message ({'DOWN',#Ref<0.0.0.583>,process,P.2,killed}) from P.2 reaches P.1.1
 123: P: receives message ({'DOWN',#Ref<0.0.0.559>,process,P.2,killed})
    in test.erl line 46
 124: P: exits normally
 125: P: true = erlang:exit(P.1, normal)
    (while exiting)
 126: P: {'DOWN',#Ref<0.0.0.562>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.0.562>,process,P,normal})
    (while exiting)
 127: Exit signal (normal) from P reaches P.1
 128: Message ({'DOWN',#Ref<0.0.0.562>,process,P,normal}) from P reaches P.2
 129: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 360
 130: P.1: #Ref<0.0.0.658> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 934
 131: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 935
 132: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 133: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 910
 134: Exit signal (shutdown) from P.1 reaches P.1.4
 135: P.1.1: receives message ({'DOWN',#Ref<0.0.0.583>,process,P.2,killed})
    in gen_server.erl line 360
 136: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 137: P.1.1: [{{n,l,foo},[]}] = ets:select(gproc, [{{{P.2,'$1'},'$2'},[{'==',{element,2,'$1'},l}],[{{'$1','$2'}}]}])
    in gproc.erl line 2317
 138: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2323
 139: P.1.1: true = ets:delete(gproc, {{n,l,foo},n})
    in gproc.erl line 2325
 140: P.1.1: 1 = ets:select_delete(gproc, [{{{P.2,{'_',l,'_'}},'_'},[],[true]}])
    in gproc.erl line 2372
 141: P.1.1: true = ets:delete(gproc, {P.2,l})
    in gproc.erl line 2373
 142: P.1.4: exits abnormally (shutdown)
 143: P.1.4: {'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown})
    (while exiting)
 144: Message ({'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown}) from P.1.4 reaches P.1
 145: P.1: receives message ({'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown})
    in supervisor.erl line 911
 146: P.1: #Ref<0.0.0.693> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 934
 147: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 935
 148: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 149: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 910
 150: Exit signal (shutdown) from P.1 reaches P.1.3
 151: P.1.3: exits abnormally (shutdown)
 152: P.1.3: {'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown})
    (while exiting)
 153: Message ({'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown}) from P.1.3 reaches P.1
 154: P.1: receives message ({'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown})
    in supervisor.erl line 911
 155: P.1: #Ref<0.0.0.714> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 934
 156: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 935
 157: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 158: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 910
 159: Exit signal (shutdown) from P.1 reaches P.1.2
 160: P.1.2: exits abnormally (shutdown)
 161: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 162: P.1.2: {'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown})
    (while exiting)
 163: Message ({'ETS-TRANSFER',249880,P.1.2,[]}) from P.1.2 reaches P.1
 164: Message ({'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown}) from P.1.2 reaches P.1
 165: P.1: receives message ({'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown})
    in supervisor.erl line 911
 166: P.1: #Ref<0.0.0.740> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 934
 167: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 935
 168: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 169: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 910
 170: Exit signal (shutdown) from P.1 reaches P.1.1
 171: P.1.1: exits abnormally (shutdown)
 172: P.1.1: {'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown})
    (while exiting)
 173: Message ({'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown}) from P.1.1 reaches P.1
 174: P.1: receives message ({'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown})
    in supervisor.erl line 911
 175: P.1: exits normally
 176: P.1: true = ets:delete(gproc)
    (while exiting)
 177: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 178: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 179: P.1: true = erlang:exit(P, normal)
    (while exiting)
 180: Exit signal (normal) from P.1 reaches P
################################################################################
Erroneous interleaving 2:
* At step 118 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 284
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2507
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 234
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 287
   7: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   8: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   9: Message ({init,error}) from init reaches P.1
  10: P.1: receives message ({init,error})
    in init.erl line 146
  11: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 242
  12: P.1: user = erlang:group_leader()
    in application.erl line 326
  13: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  14: P.1: user = erlang:group_leader()
    in application.erl line 326
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  16: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  17: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  18: P.1: user = erlang:group_leader()
    in application.erl line 326
  19: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  20: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 284
  21: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  22: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2507
  23: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  24: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 234
  25: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 287
  26: P.1.1: {P.1.1,{get_argument,generic_debug}} = init ! {P.1.1,{get_argument,generic_debug}}
    in init.erl line 145
  27: Message ({P.1.1,{get_argument,generic_debug}}) from P.1.1 reaches init
  28: Message ({init,error}) from init reaches P.1.1
  29: P.1.1: receives message ({init,error})
    in init.erl line 146
  30: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  31: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 377
  32: Message ({ack,P.1.1,{ok,P.1.1}}) from P.1.1 reaches P.1
  33: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 333
  34: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  35: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  36: P.1: undefined = ets:info(gproc_monitor, owner)
  37: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  38: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  39: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 90
  40: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  41: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  42: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 234
  43: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  44: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  45: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 377
  46: Message ({ack,P.1.2,{ok,P.1.2}}) from P.1.2 reaches P.1
  47: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 333
  48: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  49: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  50: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  51: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 284
  52: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  53: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2507
  54: Message ({'ETS-TRANSFER',249880,P.1,[]}) from P.1 reaches P.1.2
  55: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  56: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  57: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 234
  58: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 287
  59: P.1.3: {P.1.3,{get_argument,generic_debug}} = init ! {P.1.3,{get_argument,generic_debug}}
    in init.erl line 145
  60: Message ({P.1.3,{get_argument,generic_debug}}) from P.1.3 reaches init
  61: Message ({init,error}) from init reaches P.1.3
  62: P.1.3: receives message ({init,error})
    in init.erl line 146
  63: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 377
  64: Message ({ack,P.1.3,{ok,P.1.3}}) from P.1.3 reaches P.1
  65: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 333
  66: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  67: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  68: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 284
  69: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  70: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2507
  71: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  72: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  73: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 234
  74: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 287
  75: P.1.4: {P.1.4,{get_argument,generic_debug}} = init ! {P.1.4,{get_argument,generic_debug}}
    in init.erl line 145
  76: Message ({P.1.4,{get_argument,generic_debug}}) from P.1.4 reaches init
  77: Message ({init,error}) from init reaches P.1.4
  78: P.1.4: receives message ({init,error})
    in init.erl line 146
  79: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 377
  80: Message ({ack,P.1.4,{ok,P.1.4}}) from P.1.4 reaches P.1
  81: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 333
  82: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  83: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  84: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  85: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  86: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  87: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  88: P: {P.2,#Ref<0.0.0.559>} = erlang:spawn_opt({erlang,apply,[#Fun<test.8.48157746>,[]],[monitor]})
    in erlang.erl line 2373
  89: P.2: #Ref<0.0.0.562> = erlang:monitor(process, P)
    in test.erl line 36
  90: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 157
  91: P.2: #Ref<0.0.0.567> = erlang:monitor(process, P.1.1)
    in gen.erl line 200
  92: P.2: {'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 211
  93: Message ({'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}}) from P.2 reaches P.1.1
  94: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 360
  95: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  96: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  97: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  98: P.1.1: #Ref<0.0.0.583> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  99: P.1.1: {#Ref<0.0.0.567>,true} = P.2 ! {#Ref<0.0.0.567>,true}
    in gen_server.erl line 219
 100: Message ({#Ref<0.0.0.567>,true}) from P.1.1 reaches P.2
 101: P.2: receives message ({#Ref<0.0.0.567>,true})
    in gen.erl line 213
 102: P.2: true = erlang:demonitor(#Ref<0.0.0.567>, [flush])
    in gen.erl line 215
 103: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 38
 104: Message ({P.2,ok}) from P.2 reaches P
 105: P: receives message ({P.2,ok})
    in test.erl line 43
 106: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 157
 107: P: #Ref<0.0.0.604> = erlang:monitor(process, P.1.1)
    in gen.erl line 200
 108: P: {'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 211
 109: Message ({'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}}) from P reaches P.1.1
 110: P.1.1: receives message ({'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 360
 111: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
 112: P.1.1: {#Ref<0.0.0.604>,{P.2,the_value}} = P ! {#Ref<0.0.0.604>,{P.2,the_value}}
    in gen_server.erl line 219
 113: Message ({#Ref<0.0.0.604>,{P.2,the_value}}) from P.1.1 reaches P
 114: P: receives message ({#Ref<0.0.0.604>,{P.2,the_value}})
    in gen.erl line 213
 115: P: true = erlang:demonitor(#Ref<0.0.0.604>, [flush])
    in gen.erl line 215
 116: P: true = erlang:exit(P.2, kill)
    in test.erl line 45
 117: Exit signal (kill) from P reaches P.2
 118: P.2: exits abnormally (killed)
 119: P.2: {'DOWN',#Ref<0.0.0.559>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.0.0.559>,process,P.2,killed})
    (while exiting)
 120: P.2: {'DOWN',#Ref<0.0.0.583>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.0.0.583>,process,P.2,killed})
    (while exiting)
 121: Message ({'DOWN',#Ref<0.0.0.559>,process,P.2,killed}) from P.2 reaches P
 122: Message ({'DOWN',#Ref<0.0.0.583>,process,P.2,killed}) from P.2 reaches P.1.1
 123: P: receives message ({'DOWN',#Ref<0.0.0.559>,process,P.2,killed})
    in test.erl line 46
 124: P: exits normally
 125: P: true = erlang:exit(P.1, normal)
    (while exiting)
 126: P: {'DOWN',#Ref<0.0.0.562>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.0.562>,process,P,normal})
    (while exiting)
 127: Exit signal (normal) from P reaches P.1
 128: Message ({'DOWN',#Ref<0.0.0.562>,process,P,normal}) from P reaches P.2
 129: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 360
 130: P.1: #Ref<0.0.0.658> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 934
 131: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 935
 132: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 133: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 910
 134: Exit signal (shutdown) from P.1 reaches P.1.4
 135: P.1.1: receives message ({'DOWN',#Ref<0.0.0.583>,process,P.2,killed})
    in gen_server.erl line 360
 136: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 137: P.1.1: [{{n,l,foo},[]}] = ets:select(gproc, [{{{P.2,'$1'},'$2'},[{'==',{element,2,'$1'},l}],[{{'$1','$2'}}]}])
    in gproc.erl line 2317
 138: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2323
 139: P.1.1: true = ets:delete(gproc, {{n,l,foo},n})
    in gproc.erl line 2325
 140: P.1.1: 1 = ets:select_delete(gproc, [{{{P.2,{'_',l,'_'}},'_'},[],[true]}])
    in gproc.erl line 2372
 141: P.1.4: exits abnormally (shutdown)
 142: P.1.4: {'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown})
    (while exiting)
 143: Message ({'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown}) from P.1.4 reaches P.1
 144: P.1: receives message ({'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown})
    in supervisor.erl line 911
 145: P.1: #Ref<0.0.0.693> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 934
 146: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 935
 147: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 148: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 910
 149: Exit signal (shutdown) from P.1 reaches P.1.3
 150: P.1.3: exits abnormally (shutdown)
 151: P.1.3: {'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown})
    (while exiting)
 152: Message ({'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown}) from P.1.3 reaches P.1
 153: P.1: receives message ({'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown})
    in supervisor.erl line 911
 154: P.1: #Ref<0.0.0.714> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 934
 155: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 935
 156: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 157: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 910
 158: Exit signal (shutdown) from P.1 reaches P.1.2
 159: P.1.2: exits abnormally (shutdown)
 160: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 161: P.1.2: {'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown})
    (while exiting)
 162: Message ({'ETS-TRANSFER',249880,P.1.2,[]}) from P.1.2 reaches P.1
 163: Message ({'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown}) from P.1.2 reaches P.1
 164: P.1: receives message ({'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown})
    in supervisor.erl line 911
 165: P.1: #Ref<0.0.0.740> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 934
 166: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 935
 167: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 168: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 910
 169: Exit signal (shutdown) from P.1 reaches P.1.1
 170: P.1.1: exits abnormally (shutdown)
 171: P.1.1: {'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown})
    (while exiting)
 172: Message ({'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown}) from P.1.1 reaches P.1
 173: P.1: receives message ({'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown})
    in supervisor.erl line 911
 174: P.1: exits normally
 175: P.1: true = ets:delete(gproc)
    (while exiting)
 176: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 177: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 178: P.1: true = erlang:exit(P, normal)
    (while exiting)
 179: Exit signal (normal) from P.1 reaches P
################################################################################
Erroneous interleaving 3:
* At step 118 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 284
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2507
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 234
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 287
   7: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   8: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   9: Message ({init,error}) from init reaches P.1
  10: P.1: receives message ({init,error})
    in init.erl line 146
  11: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 242
  12: P.1: user = erlang:group_leader()
    in application.erl line 326
  13: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  14: P.1: user = erlang:group_leader()
    in application.erl line 326
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  16: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  17: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  18: P.1: user = erlang:group_leader()
    in application.erl line 326
  19: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  20: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 284
  21: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  22: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2507
  23: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  24: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 234
  25: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 287
  26: P.1.1: {P.1.1,{get_argument,generic_debug}} = init ! {P.1.1,{get_argument,generic_debug}}
    in init.erl line 145
  27: Message ({P.1.1,{get_argument,generic_debug}}) from P.1.1 reaches init
  28: Message ({init,error}) from init reaches P.1.1
  29: P.1.1: receives message ({init,error})
    in init.erl line 146
  30: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  31: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 377
  32: Message ({ack,P.1.1,{ok,P.1.1}}) from P.1.1 reaches P.1
  33: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 333
  34: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  35: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  36: P.1: undefined = ets:info(gproc_monitor, owner)
  37: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  38: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  39: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 90
  40: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  41: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  42: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 234
  43: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  44: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  45: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 377
  46: Message ({ack,P.1.2,{ok,P.1.2}}) from P.1.2 reaches P.1
  47: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 333
  48: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  49: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  50: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  51: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 284
  52: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  53: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2507
  54: Message ({'ETS-TRANSFER',249880,P.1,[]}) from P.1 reaches P.1.2
  55: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  56: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  57: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 234
  58: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 287
  59: P.1.3: {P.1.3,{get_argument,generic_debug}} = init ! {P.1.3,{get_argument,generic_debug}}
    in init.erl line 145
  60: Message ({P.1.3,{get_argument,generic_debug}}) from P.1.3 reaches init
  61: Message ({init,error}) from init reaches P.1.3
  62: P.1.3: receives message ({init,error})
    in init.erl line 146
  63: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 377
  64: Message ({ack,P.1.3,{ok,P.1.3}}) from P.1.3 reaches P.1
  65: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 333
  66: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  67: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  68: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 284
  69: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  70: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2507
  71: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  72: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  73: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 234
  74: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 287
  75: P.1.4: {P.1.4,{get_argument,generic_debug}} = init ! {P.1.4,{get_argument,generic_debug}}
    in init.erl line 145
  76: Message ({P.1.4,{get_argument,generic_debug}}) from P.1.4 reaches init
  77: Message ({init,error}) from init reaches P.1.4
  78: P.1.4: receives message ({init,error})
    in init.erl line 146
  79: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 377
  80: Message ({ack,P.1.4,{ok,P.1.4}}) from P.1.4 reaches P.1
  81: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 333
  82: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  83: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  84: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  85: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  86: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  87: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  88: P: {P.2,#Ref<0.0.0.559>} = erlang:spawn_opt({erlang,apply,[#Fun<test.8.48157746>,[]],[monitor]})
    in erlang.erl line 2373
  89: P.2: #Ref<0.0.0.562> = erlang:monitor(process, P)
    in test.erl line 36
  90: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 157
  91: P.2: #Ref<0.0.0.567> = erlang:monitor(process, P.1.1)
    in gen.erl line 200
  92: P.2: {'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 211
  93: Message ({'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}}) from P.2 reaches P.1.1
  94: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 360
  95: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  96: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  97: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  98: P.1.1: #Ref<0.0.0.583> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  99: P.1.1: {#Ref<0.0.0.567>,true} = P.2 ! {#Ref<0.0.0.567>,true}
    in gen_server.erl line 219
 100: Message ({#Ref<0.0.0.567>,true}) from P.1.1 reaches P.2
 101: P.2: receives message ({#Ref<0.0.0.567>,true})
    in gen.erl line 213
 102: P.2: true = erlang:demonitor(#Ref<0.0.0.567>, [flush])
    in gen.erl line 215
 103: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 38
 104: Message ({P.2,ok}) from P.2 reaches P
 105: P: receives message ({P.2,ok})
    in test.erl line 43
 106: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 157
 107: P: #Ref<0.0.0.604> = erlang:monitor(process, P.1.1)
    in gen.erl line 200
 108: P: {'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 211
 109: Message ({'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}}) from P reaches P.1.1
 110: P.1.1: receives message ({'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 360
 111: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
 112: P.1.1: {#Ref<0.0.0.604>,{P.2,the_value}} = P ! {#Ref<0.0.0.604>,{P.2,the_value}}
    in gen_server.erl line 219
 113: Message ({#Ref<0.0.0.604>,{P.2,the_value}}) from P.1.1 reaches P
 114: P: receives message ({#Ref<0.0.0.604>,{P.2,the_value}})
    in gen.erl line 213
 115: P: true = erlang:demonitor(#Ref<0.0.0.604>, [flush])
    in gen.erl line 215
 116: P: true = erlang:exit(P.2, kill)
    in test.erl line 45
 117: Exit signal (kill) from P reaches P.2
 118: P.2: exits abnormally (killed)
 119: P.2: {'DOWN',#Ref<0.0.0.559>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.0.0.559>,process,P.2,killed})
    (while exiting)
 120: P.2: {'DOWN',#Ref<0.0.0.583>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.0.0.583>,process,P.2,killed})
    (while exiting)
 121: Message ({'DOWN',#Ref<0.0.0.559>,process,P.2,killed}) from P.2 reaches P
 122: Message ({'DOWN',#Ref<0.0.0.583>,process,P.2,killed}) from P.2 reaches P.1.1
 123: P: receives message ({'DOWN',#Ref<0.0.0.559>,process,P.2,killed})
    in test.erl line 46
 124: P: exits normally
 125: P: true = erlang:exit(P.1, normal)
    (while exiting)
 126: P: {'DOWN',#Ref<0.0.0.562>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.0.562>,process,P,normal})
    (while exiting)
 127: Exit signal (normal) from P reaches P.1
 128: Message ({'DOWN',#Ref<0.0.0.562>,process,P,normal}) from P reaches P.2
 129: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 360
 130: P.1: #Ref<0.0.0.658> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 934
 131: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 935
 132: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 133: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 910
 134: Exit signal (shutdown) from P.1 reaches P.1.4
 135: P.1.1: receives message ({'DOWN',#Ref<0.0.0.583>,process,P.2,killed})
    in gen_server.erl line 360
 136: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 137: P.1.1: [{{n,l,foo},[]}] = ets:select(gproc, [{{{P.2,'$1'},'$2'},[{'==',{element,2,'$1'},l}],[{{'$1','$2'}}]}])
    in gproc.erl line 2317
 138: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2323
 139: P.1.1: true = ets:delete(gproc, {{n,l,foo},n})
    in gproc.erl line 2325
 140: P.1.4: exits abnormally (shutdown)
 141: P.1.4: {'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown})
    (while exiting)
 142: Message ({'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown}) from P.1.4 reaches P.1
 143: P.1: receives message ({'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown})
    in supervisor.erl line 911
 144: P.1: #Ref<0.0.0.693> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 934
 145: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 935
 146: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 147: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 910
 148: Exit signal (shutdown) from P.1 reaches P.1.3
 149: P.1.3: exits abnormally (shutdown)
 150: P.1.3: {'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown})
    (while exiting)
 151: Message ({'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown}) from P.1.3 reaches P.1
 152: P.1: receives message ({'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown})
    in supervisor.erl line 911
 153: P.1: #Ref<0.0.0.714> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 934
 154: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 935
 155: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 156: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 910
 157: Exit signal (shutdown) from P.1 reaches P.1.2
 158: P.1.2: exits abnormally (shutdown)
 159: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 160: P.1.2: {'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown})
    (while exiting)
 161: Message ({'ETS-TRANSFER',249880,P.1.2,[]}) from P.1.2 reaches P.1
 162: Message ({'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown}) from P.1.2 reaches P.1
 163: P.1: receives message ({'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown})
    in supervisor.erl line 911
 164: P.1: #Ref<0.0.0.740> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 934
 165: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 935
 166: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 167: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 910
 168: Exit signal (shutdown) from P.1 reaches P.1.1
 169: P.1.1: exits abnormally (shutdown)
 170: P.1.1: {'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown})
    (while exiting)
 171: Message ({'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown}) from P.1.1 reaches P.1
 172: P.1: receives message ({'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown})
    in supervisor.erl line 911
 173: P.1: exits normally
 174: P.1: true = ets:delete(gproc)
    (while exiting)
 175: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 176: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 177: P.1: true = erlang:exit(P, normal)
    (while exiting)
 178: Exit signal (normal) from P.1 reaches P
################################################################################
Erroneous interleaving 4:
* At step 118 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 284
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2507
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 234
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 287
   7: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   8: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   9: Message ({init,error}) from init reaches P.1
  10: P.1: receives message ({init,error})
    in init.erl line 146
  11: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 242
  12: P.1: user = erlang:group_leader()
    in application.erl line 326
  13: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  14: P.1: user = erlang:group_leader()
    in application.erl line 326
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  16: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  17: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  18: P.1: user = erlang:group_leader()
    in application.erl line 326
  19: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  20: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 284
  21: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  22: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2507
  23: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  24: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 234
  25: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 287
  26: P.1.1: {P.1.1,{get_argument,generic_debug}} = init ! {P.1.1,{get_argument,generic_debug}}
    in init.erl line 145
  27: Message ({P.1.1,{get_argument,generic_debug}}) from P.1.1 reaches init
  28: Message ({init,error}) from init reaches P.1.1
  29: P.1.1: receives message ({init,error})
    in init.erl line 146
  30: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  31: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 377
  32: Message ({ack,P.1.1,{ok,P.1.1}}) from P.1.1 reaches P.1
  33: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 333
  34: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  35: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  36: P.1: undefined = ets:info(gproc_monitor, owner)
  37: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  38: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  39: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 90
  40: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  41: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  42: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 234
  43: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  44: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  45: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 377
  46: Message ({ack,P.1.2,{ok,P.1.2}}) from P.1.2 reaches P.1
  47: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 333
  48: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  49: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  50: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  51: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 284
  52: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  53: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2507
  54: Message ({'ETS-TRANSFER',249880,P.1,[]}) from P.1 reaches P.1.2
  55: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  56: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  57: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 234
  58: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 287
  59: P.1.3: {P.1.3,{get_argument,generic_debug}} = init ! {P.1.3,{get_argument,generic_debug}}
    in init.erl line 145
  60: Message ({P.1.3,{get_argument,generic_debug}}) from P.1.3 reaches init
  61: Message ({init,error}) from init reaches P.1.3
  62: P.1.3: receives message ({init,error})
    in init.erl line 146
  63: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 377
  64: Message ({ack,P.1.3,{ok,P.1.3}}) from P.1.3 reaches P.1
  65: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 333
  66: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  67: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  68: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 284
  69: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  70: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2507
  71: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  72: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  73: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 234
  74: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 287
  75: P.1.4: {P.1.4,{get_argument,generic_debug}} = init ! {P.1.4,{get_argument,generic_debug}}
    in init.erl line 145
  76: Message ({P.1.4,{get_argument,generic_debug}}) from P.1.4 reaches init
  77: Message ({init,error}) from init reaches P.1.4
  78: P.1.4: receives message ({init,error})
    in init.erl line 146
  79: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 377
  80: Message ({ack,P.1.4,{ok,P.1.4}}) from P.1.4 reaches P.1
  81: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 333
  82: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  83: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  84: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  85: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  86: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  87: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  88: P: {P.2,#Ref<0.0.0.559>} = erlang:spawn_opt({erlang,apply,[#Fun<test.8.48157746>,[]],[monitor]})
    in erlang.erl line 2373
  89: P.2: #Ref<0.0.0.562> = erlang:monitor(process, P)
    in test.erl line 36
  90: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 157
  91: P.2: #Ref<0.0.0.567> = erlang:monitor(process, P.1.1)
    in gen.erl line 200
  92: P.2: {'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 211
  93: Message ({'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}}) from P.2 reaches P.1.1
  94: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 360
  95: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  96: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  97: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  98: P.1.1: #Ref<0.0.0.583> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  99: P.1.1: {#Ref<0.0.0.567>,true} = P.2 ! {#Ref<0.0.0.567>,true}
    in gen_server.erl line 219
 100: Message ({#Ref<0.0.0.567>,true}) from P.1.1 reaches P.2
 101: P.2: receives message ({#Ref<0.0.0.567>,true})
    in gen.erl line 213
 102: P.2: true = erlang:demonitor(#Ref<0.0.0.567>, [flush])
    in gen.erl line 215
 103: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 38
 104: Message ({P.2,ok}) from P.2 reaches P
 105: P: receives message ({P.2,ok})
    in test.erl line 43
 106: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 157
 107: P: #Ref<0.0.0.604> = erlang:monitor(process, P.1.1)
    in gen.erl line 200
 108: P: {'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 211
 109: Message ({'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}}) from P reaches P.1.1
 110: P.1.1: receives message ({'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 360
 111: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
 112: P.1.1: {#Ref<0.0.0.604>,{P.2,the_value}} = P ! {#Ref<0.0.0.604>,{P.2,the_value}}
    in gen_server.erl line 219
 113: Message ({#Ref<0.0.0.604>,{P.2,the_value}}) from P.1.1 reaches P
 114: P: receives message ({#Ref<0.0.0.604>,{P.2,the_value}})
    in gen.erl line 213
 115: P: true = erlang:demonitor(#Ref<0.0.0.604>, [flush])
    in gen.erl line 215
 116: P: true = erlang:exit(P.2, kill)
    in test.erl line 45
 117: Exit signal (kill) from P reaches P.2
 118: P.2: exits abnormally (killed)
 119: P.2: {'DOWN',#Ref<0.0.0.559>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.0.0.559>,process,P.2,killed})
    (while exiting)
 120: P.2: {'DOWN',#Ref<0.0.0.583>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.0.0.583>,process,P.2,killed})
    (while exiting)
 121: Message ({'DOWN',#Ref<0.0.0.559>,process,P.2,killed}) from P.2 reaches P
 122: Message ({'DOWN',#Ref<0.0.0.583>,process,P.2,killed}) from P.2 reaches P.1.1
 123: P: receives message ({'DOWN',#Ref<0.0.0.559>,process,P.2,killed})
    in test.erl line 46
 124: P: exits normally
 125: P: true = erlang:exit(P.1, normal)
    (while exiting)
 126: P: {'DOWN',#Ref<0.0.0.562>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.0.562>,process,P,normal})
    (while exiting)
 127: Exit signal (normal) from P reaches P.1
 128: Message ({'DOWN',#Ref<0.0.0.562>,process,P,normal}) from P reaches P.2
 129: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 360
 130: P.1: #Ref<0.0.0.658> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 934
 131: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 935
 132: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 133: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 910
 134: Exit signal (shutdown) from P.1 reaches P.1.4
 135: P.1.1: receives message ({'DOWN',#Ref<0.0.0.583>,process,P.2,killed})
    in gen_server.erl line 360
 136: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 137: P.1.1: [{{n,l,foo},[]}] = ets:select(gproc, [{{{P.2,'$1'},'$2'},[{'==',{element,2,'$1'},l}],[{{'$1','$2'}}]}])
    in gproc.erl line 2317
 138: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2323
 139: P.1.4: exits abnormally (shutdown)
 140: P.1.4: {'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown})
    (while exiting)
 141: Message ({'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown}) from P.1.4 reaches P.1
 142: P.1: receives message ({'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown})
    in supervisor.erl line 911
 143: P.1: #Ref<0.0.0.693> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 934
 144: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 935
 145: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 146: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 910
 147: Exit signal (shutdown) from P.1 reaches P.1.3
 148: P.1.3: exits abnormally (shutdown)
 149: P.1.3: {'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown})
    (while exiting)
 150: Message ({'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown}) from P.1.3 reaches P.1
 151: P.1: receives message ({'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown})
    in supervisor.erl line 911
 152: P.1: #Ref<0.0.0.714> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 934
 153: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 935
 154: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 155: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 910
 156: Exit signal (shutdown) from P.1 reaches P.1.2
 157: P.1.2: exits abnormally (shutdown)
 158: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 159: P.1.2: {'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown})
    (while exiting)
 160: Message ({'ETS-TRANSFER',249880,P.1.2,[]}) from P.1.2 reaches P.1
 161: Message ({'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown}) from P.1.2 reaches P.1
 162: P.1: receives message ({'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown})
    in supervisor.erl line 911
 163: P.1: #Ref<0.0.0.740> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 934
 164: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 935
 165: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 166: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 910
 167: Exit signal (shutdown) from P.1 reaches P.1.1
 168: P.1.1: exits abnormally (shutdown)
 169: P.1.1: {'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown})
    (while exiting)
 170: Message ({'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown}) from P.1.1 reaches P.1
 171: P.1: receives message ({'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown})
    in supervisor.erl line 911
 172: P.1: exits normally
 173: P.1: true = ets:delete(gproc)
    (while exiting)
 174: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 175: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 176: P.1: true = erlang:exit(P, normal)
    (while exiting)
 177: Exit signal (normal) from P.1 reaches P
################################################################################
Erroneous interleaving 5:
* At step 118 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 284
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2507
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 234
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 287
   7: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   8: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   9: Message ({init,error}) from init reaches P.1
  10: P.1: receives message ({init,error})
    in init.erl line 146
  11: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 242
  12: P.1: user = erlang:group_leader()
    in application.erl line 326
  13: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  14: P.1: user = erlang:group_leader()
    in application.erl line 326
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  16: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  17: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  18: P.1: user = erlang:group_leader()
    in application.erl line 326
  19: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  20: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 284
  21: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  22: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2507
  23: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  24: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 234
  25: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 287
  26: P.1.1: {P.1.1,{get_argument,generic_debug}} = init ! {P.1.1,{get_argument,generic_debug}}
    in init.erl line 145
  27: Message ({P.1.1,{get_argument,generic_debug}}) from P.1.1 reaches init
  28: Message ({init,error}) from init reaches P.1.1
  29: P.1.1: receives message ({init,error})
    in init.erl line 146
  30: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  31: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 377
  32: Message ({ack,P.1.1,{ok,P.1.1}}) from P.1.1 reaches P.1
  33: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 333
  34: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  35: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  36: P.1: undefined = ets:info(gproc_monitor, owner)
  37: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  38: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  39: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 90
  40: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  41: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  42: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 234
  43: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  44: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  45: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 377
  46: Message ({ack,P.1.2,{ok,P.1.2}}) from P.1.2 reaches P.1
  47: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 333
  48: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  49: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  50: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  51: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 284
  52: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  53: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2507
  54: Message ({'ETS-TRANSFER',249880,P.1,[]}) from P.1 reaches P.1.2
  55: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  56: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  57: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 234
  58: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 287
  59: P.1.3: {P.1.3,{get_argument,generic_debug}} = init ! {P.1.3,{get_argument,generic_debug}}
    in init.erl line 145
  60: Message ({P.1.3,{get_argument,generic_debug}}) from P.1.3 reaches init
  61: Message ({init,error}) from init reaches P.1.3
  62: P.1.3: receives message ({init,error})
    in init.erl line 146
  63: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 377
  64: Message ({ack,P.1.3,{ok,P.1.3}}) from P.1.3 reaches P.1
  65: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 333
  66: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  67: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  68: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 284
  69: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  70: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2507
  71: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  72: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  73: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 234
  74: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 287
  75: P.1.4: {P.1.4,{get_argument,generic_debug}} = init ! {P.1.4,{get_argument,generic_debug}}
    in init.erl line 145
  76: Message ({P.1.4,{get_argument,generic_debug}}) from P.1.4 reaches init
  77: Message ({init,error}) from init reaches P.1.4
  78: P.1.4: receives message ({init,error})
    in init.erl line 146
  79: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 377
  80: Message ({ack,P.1.4,{ok,P.1.4}}) from P.1.4 reaches P.1
  81: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 333
  82: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  83: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  84: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  85: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  86: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  87: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  88: P: {P.2,#Ref<0.0.0.559>} = erlang:spawn_opt({erlang,apply,[#Fun<test.8.48157746>,[]],[monitor]})
    in erlang.erl line 2373
  89: P.2: #Ref<0.0.0.562> = erlang:monitor(process, P)
    in test.erl line 36
  90: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 157
  91: P.2: #Ref<0.0.0.567> = erlang:monitor(process, P.1.1)
    in gen.erl line 200
  92: P.2: {'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 211
  93: Message ({'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}}) from P.2 reaches P.1.1
  94: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 360
  95: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  96: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  97: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  98: P.1.1: #Ref<0.0.0.583> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  99: P.1.1: {#Ref<0.0.0.567>,true} = P.2 ! {#Ref<0.0.0.567>,true}
    in gen_server.erl line 219
 100: Message ({#Ref<0.0.0.567>,true}) from P.1.1 reaches P.2
 101: P.2: receives message ({#Ref<0.0.0.567>,true})
    in gen.erl line 213
 102: P.2: true = erlang:demonitor(#Ref<0.0.0.567>, [flush])
    in gen.erl line 215
 103: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 38
 104: Message ({P.2,ok}) from P.2 reaches P
 105: P: receives message ({P.2,ok})
    in test.erl line 43
 106: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 157
 107: P: #Ref<0.0.0.604> = erlang:monitor(process, P.1.1)
    in gen.erl line 200
 108: P: {'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 211
 109: Message ({'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}}) from P reaches P.1.1
 110: P.1.1: receives message ({'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 360
 111: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
 112: P.1.1: {#Ref<0.0.0.604>,{P.2,the_value}} = P ! {#Ref<0.0.0.604>,{P.2,the_value}}
    in gen_server.erl line 219
 113: Message ({#Ref<0.0.0.604>,{P.2,the_value}}) from P.1.1 reaches P
 114: P: receives message ({#Ref<0.0.0.604>,{P.2,the_value}})
    in gen.erl line 213
 115: P: true = erlang:demonitor(#Ref<0.0.0.604>, [flush])
    in gen.erl line 215
 116: P: true = erlang:exit(P.2, kill)
    in test.erl line 45
 117: Exit signal (kill) from P reaches P.2
 118: P.2: exits abnormally (killed)
 119: P.2: {'DOWN',#Ref<0.0.0.559>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.0.0.559>,process,P.2,killed})
    (while exiting)
 120: P.2: {'DOWN',#Ref<0.0.0.583>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.0.0.583>,process,P.2,killed})
    (while exiting)
 121: Message ({'DOWN',#Ref<0.0.0.559>,process,P.2,killed}) from P.2 reaches P
 122: Message ({'DOWN',#Ref<0.0.0.583>,process,P.2,killed}) from P.2 reaches P.1.1
 123: P: receives message ({'DOWN',#Ref<0.0.0.559>,process,P.2,killed})
    in test.erl line 46
 124: P: exits normally
 125: P: true = erlang:exit(P.1, normal)
    (while exiting)
 126: P: {'DOWN',#Ref<0.0.0.562>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.0.562>,process,P,normal})
    (while exiting)
 127: Exit signal (normal) from P reaches P.1
 128: Message ({'DOWN',#Ref<0.0.0.562>,process,P,normal}) from P reaches P.2
 129: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 360
 130: P.1: #Ref<0.0.0.658> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 934
 131: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 935
 132: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 133: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 910
 134: Exit signal (shutdown) from P.1 reaches P.1.4
 135: P.1.1: receives message ({'DOWN',#Ref<0.0.0.583>,process,P.2,killed})
    in gen_server.erl line 360
 136: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 137: P.1.1: [{{n,l,foo},[]}] = ets:select(gproc, [{{{P.2,'$1'},'$2'},[{'==',{element,2,'$1'},l}],[{{'$1','$2'}}]}])
    in gproc.erl line 2317
 138: P.1.4: exits abnormally (shutdown)
 139: P.1.4: {'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown})
    (while exiting)
 140: Message ({'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown}) from P.1.4 reaches P.1
 141: P.1: receives message ({'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown})
    in supervisor.erl line 911
 142: P.1: #Ref<0.0.0.693> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 934
 143: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 935
 144: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 145: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 910
 146: Exit signal (shutdown) from P.1 reaches P.1.3
 147: P.1.3: exits abnormally (shutdown)
 148: P.1.3: {'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown})
    (while exiting)
 149: Message ({'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown}) from P.1.3 reaches P.1
 150: P.1: receives message ({'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown})
    in supervisor.erl line 911
 151: P.1: #Ref<0.0.0.714> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 934
 152: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 935
 153: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 154: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 910
 155: Exit signal (shutdown) from P.1 reaches P.1.2
 156: P.1.2: exits abnormally (shutdown)
 157: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 158: P.1.2: {'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown})
    (while exiting)
 159: Message ({'ETS-TRANSFER',249880,P.1.2,[]}) from P.1.2 reaches P.1
 160: Message ({'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown}) from P.1.2 reaches P.1
 161: P.1: receives message ({'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown})
    in supervisor.erl line 911
 162: P.1: #Ref<0.0.0.740> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 934
 163: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 935
 164: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 165: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 910
 166: Exit signal (shutdown) from P.1 reaches P.1.1
 167: P.1.1: exits abnormally (shutdown)
 168: P.1.1: {'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown})
    (while exiting)
 169: Message ({'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown}) from P.1.1 reaches P.1
 170: P.1: receives message ({'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown})
    in supervisor.erl line 911
 171: P.1: exits normally
 172: P.1: true = ets:delete(gproc)
    (while exiting)
 173: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 174: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 175: P.1: true = erlang:exit(P, normal)
    (while exiting)
 176: Exit signal (normal) from P.1 reaches P
################################################################################
Erroneous interleaving 6:
* At step 118 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 284
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2507
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 234
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 287
   7: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   8: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   9: Message ({init,error}) from init reaches P.1
  10: P.1: receives message ({init,error})
    in init.erl line 146
  11: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 242
  12: P.1: user = erlang:group_leader()
    in application.erl line 326
  13: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  14: P.1: user = erlang:group_leader()
    in application.erl line 326
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  16: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  17: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  18: P.1: user = erlang:group_leader()
    in application.erl line 326
  19: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  20: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 284
  21: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  22: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2507
  23: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  24: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 234
  25: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 287
  26: P.1.1: {P.1.1,{get_argument,generic_debug}} = init ! {P.1.1,{get_argument,generic_debug}}
    in init.erl line 145
  27: Message ({P.1.1,{get_argument,generic_debug}}) from P.1.1 reaches init
  28: Message ({init,error}) from init reaches P.1.1
  29: P.1.1: receives message ({init,error})
    in init.erl line 146
  30: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  31: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 377
  32: Message ({ack,P.1.1,{ok,P.1.1}}) from P.1.1 reaches P.1
  33: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 333
  34: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  35: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  36: P.1: undefined = ets:info(gproc_monitor, owner)
  37: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  38: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  39: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 90
  40: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  41: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  42: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 234
  43: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  44: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  45: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 377
  46: Message ({ack,P.1.2,{ok,P.1.2}}) from P.1.2 reaches P.1
  47: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 333
  48: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  49: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  50: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  51: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 284
  52: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  53: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2507
  54: Message ({'ETS-TRANSFER',249880,P.1,[]}) from P.1 reaches P.1.2
  55: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  56: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  57: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 234
  58: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 287
  59: P.1.3: {P.1.3,{get_argument,generic_debug}} = init ! {P.1.3,{get_argument,generic_debug}}
    in init.erl line 145
  60: Message ({P.1.3,{get_argument,generic_debug}}) from P.1.3 reaches init
  61: Message ({init,error}) from init reaches P.1.3
  62: P.1.3: receives message ({init,error})
    in init.erl line 146
  63: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 377
  64: Message ({ack,P.1.3,{ok,P.1.3}}) from P.1.3 reaches P.1
  65: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 333
  66: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  67: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  68: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 284
  69: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  70: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2507
  71: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  72: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  73: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 234
  74: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 287
  75: P.1.4: {P.1.4,{get_argument,generic_debug}} = init ! {P.1.4,{get_argument,generic_debug}}
    in init.erl line 145
  76: Message ({P.1.4,{get_argument,generic_debug}}) from P.1.4 reaches init
  77: Message ({init,error}) from init reaches P.1.4
  78: P.1.4: receives message ({init,error})
    in init.erl line 146
  79: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 377
  80: Message ({ack,P.1.4,{ok,P.1.4}}) from P.1.4 reaches P.1
  81: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 333
  82: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  83: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  84: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  85: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  86: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  87: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  88: P: {P.2,#Ref<0.0.0.559>} = erlang:spawn_opt({erlang,apply,[#Fun<test.8.48157746>,[]],[monitor]})
    in erlang.erl line 2373
  89: P.2: #Ref<0.0.0.562> = erlang:monitor(process, P)
    in test.erl line 36
  90: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 157
  91: P.2: #Ref<0.0.0.567> = erlang:monitor(process, P.1.1)
    in gen.erl line 200
  92: P.2: {'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 211
  93: Message ({'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}}) from P.2 reaches P.1.1
  94: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 360
  95: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  96: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  97: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  98: P.1.1: #Ref<0.0.0.583> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  99: P.1.1: {#Ref<0.0.0.567>,true} = P.2 ! {#Ref<0.0.0.567>,true}
    in gen_server.erl line 219
 100: Message ({#Ref<0.0.0.567>,true}) from P.1.1 reaches P.2
 101: P.2: receives message ({#Ref<0.0.0.567>,true})
    in gen.erl line 213
 102: P.2: true = erlang:demonitor(#Ref<0.0.0.567>, [flush])
    in gen.erl line 215
 103: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 38
 104: Message ({P.2,ok}) from P.2 reaches P
 105: P: receives message ({P.2,ok})
    in test.erl line 43
 106: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 157
 107: P: #Ref<0.0.0.604> = erlang:monitor(process, P.1.1)
    in gen.erl line 200
 108: P: {'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 211
 109: Message ({'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}}) from P reaches P.1.1
 110: P.1.1: receives message ({'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 360
 111: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
 112: P.1.1: {#Ref<0.0.0.604>,{P.2,the_value}} = P ! {#Ref<0.0.0.604>,{P.2,the_value}}
    in gen_server.erl line 219
 113: Message ({#Ref<0.0.0.604>,{P.2,the_value}}) from P.1.1 reaches P
 114: P: receives message ({#Ref<0.0.0.604>,{P.2,the_value}})
    in gen.erl line 213
 115: P: true = erlang:demonitor(#Ref<0.0.0.604>, [flush])
    in gen.erl line 215
 116: P: true = erlang:exit(P.2, kill)
    in test.erl line 45
 117: Exit signal (kill) from P reaches P.2
 118: P.2: exits abnormally (killed)
 119: P.2: {'DOWN',#Ref<0.0.0.559>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.0.0.559>,process,P.2,killed})
    (while exiting)
 120: P.2: {'DOWN',#Ref<0.0.0.583>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.0.0.583>,process,P.2,killed})
    (while exiting)
 121: Message ({'DOWN',#Ref<0.0.0.559>,process,P.2,killed}) from P.2 reaches P
 122: Message ({'DOWN',#Ref<0.0.0.583>,process,P.2,killed}) from P.2 reaches P.1.1
 123: P: receives message ({'DOWN',#Ref<0.0.0.559>,process,P.2,killed})
    in test.erl line 46
 124: P: exits normally
 125: P: true = erlang:exit(P.1, normal)
    (while exiting)
 126: P: {'DOWN',#Ref<0.0.0.562>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.0.562>,process,P,normal})
    (while exiting)
 127: Exit signal (normal) from P reaches P.1
 128: Message ({'DOWN',#Ref<0.0.0.562>,process,P,normal}) from P reaches P.2
 129: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 360
 130: P.1: #Ref<0.0.0.658> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 934
 131: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 935
 132: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 133: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 910
 134: Exit signal (shutdown) from P.1 reaches P.1.4
 135: P.1.1: receives message ({'DOWN',#Ref<0.0.0.583>,process,P.2,killed})
    in gen_server.erl line 360
 136: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 137: P.1.4: exits abnormally (shutdown)
 138: P.1.4: {'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown})
    (while exiting)
 139: Message ({'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown}) from P.1.4 reaches P.1
 140: P.1: receives message ({'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown})
    in supervisor.erl line 911
 141: P.1: #Ref<0.0.0.693> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 934
 142: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 935
 143: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 144: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 910
 145: Exit signal (shutdown) from P.1 reaches P.1.3
 146: P.1.3: exits abnormally (shutdown)
 147: P.1.3: {'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown})
    (while exiting)
 148: Message ({'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown}) from P.1.3 reaches P.1
 149: P.1: receives message ({'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown})
    in supervisor.erl line 911
 150: P.1: #Ref<0.0.0.714> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 934
 151: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 935
 152: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 153: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 910
 154: Exit signal (shutdown) from P.1 reaches P.1.2
 155: P.1.2: exits abnormally (shutdown)
 156: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 157: P.1.2: {'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown})
    (while exiting)
 158: Message ({'ETS-TRANSFER',249880,P.1.2,[]}) from P.1.2 reaches P.1
 159: Message ({'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown}) from P.1.2 reaches P.1
 160: P.1: receives message ({'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown})
    in supervisor.erl line 911
 161: P.1: #Ref<0.0.0.740> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 934
 162: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 935
 163: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 164: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 910
 165: Exit signal (shutdown) from P.1 reaches P.1.1
 166: P.1.1: exits abnormally (shutdown)
 167: P.1.1: {'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown})
    (while exiting)
 168: Message ({'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown}) from P.1.1 reaches P.1
 169: P.1: receives message ({'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown})
    in supervisor.erl line 911
 170: P.1: exits normally
 171: P.1: true = ets:delete(gproc)
    (while exiting)
 172: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 173: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 174: P.1: true = erlang:exit(P, normal)
    (while exiting)
 175: Exit signal (normal) from P.1 reaches P
################################################################################
Erroneous interleaving 7:
* At step 118 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------
Interleaving info:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 284
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 677
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2507
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 233
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 234
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 287
   7: P.1: {P.1,{get_argument,generic_debug}} = init ! {P.1,{get_argument,generic_debug}}
    in init.erl line 145
   8: Message ({P.1,{get_argument,generic_debug}}) from P.1 reaches init
   9: Message ({init,error}) from init reaches P.1
  10: P.1: receives message ({init,error})
    in init.erl line 146
  11: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 242
  12: P.1: user = erlang:group_leader()
    in application.erl line 326
  13: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  14: P.1: user = erlang:group_leader()
    in application.erl line 326
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  16: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  17: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  18: P.1: user = erlang:group_leader()
    in application.erl line 326
  19: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 325
  20: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 284
  21: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  22: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2507
  23: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  24: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 234
  25: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 287
  26: P.1.1: {P.1.1,{get_argument,generic_debug}} = init ! {P.1.1,{get_argument,generic_debug}}
    in init.erl line 145
  27: Message ({P.1.1,{get_argument,generic_debug}}) from P.1.1 reaches init
  28: Message ({init,error}) from init reaches P.1.1
  29: P.1.1: receives message ({init,error})
    in init.erl line 146
  30: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  31: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 377
  32: Message ({ack,P.1.1,{ok,P.1.1}}) from P.1.1 reaches P.1
  33: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 333
  34: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  35: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  36: P.1: undefined = ets:info(gproc_monitor, owner)
  37: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  38: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  39: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 90
  40: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{name,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  41: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  42: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 234
  43: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  44: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  45: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 377
  46: Message ({ack,P.1.2,{ok,P.1.2}}) from P.1.2 reaches P.1
  47: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 333
  48: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  49: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  50: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  51: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 284
  52: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  53: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2507
  54: Message ({'ETS-TRANSFER',249880,P.1,[]}) from P.1 reaches P.1.2
  55: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{name,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  56: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  57: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 234
  58: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 287
  59: P.1.3: {P.1.3,{get_argument,generic_debug}} = init ! {P.1.3,{get_argument,generic_debug}}
    in init.erl line 145
  60: Message ({P.1.3,{get_argument,generic_debug}}) from P.1.3 reaches init
  61: Message ({init,error}) from init reaches P.1.3
  62: P.1.3: receives message ({init,error})
    in init.erl line 146
  63: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 377
  64: Message ({ack,P.1.3,{ok,P.1.3}}) from P.1.3 reaches P.1
  65: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 333
  66: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  67: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  68: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 284
  69: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 677
  70: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2507
  71: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{name,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  72: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 233
  73: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 234
  74: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 287
  75: P.1.4: {P.1.4,{get_argument,generic_debug}} = init ! {P.1.4,{get_argument,generic_debug}}
    in init.erl line 145
  76: Message ({P.1.4,{get_argument,generic_debug}}) from P.1.4 reaches init
  77: Message ({init,error}) from init reaches P.1.4
  78: P.1.4: receives message ({init,error})
    in init.erl line 146
  79: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 377
  80: Message ({ack,P.1.4,{ok,P.1.4}}) from P.1.4 reaches P.1
  81: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 333
  82: P.1: user = erlang:group_leader()
    in error_logger.erl line 210
  83: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 221
  84: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 377
  85: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{name,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  86: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  87: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 333
  88: P: {P.2,#Ref<0.0.0.559>} = erlang:spawn_opt({erlang,apply,[#Fun<test.8.48157746>,[]],[monitor]})
    in erlang.erl line 2373
  89: P.2: #Ref<0.0.0.562> = erlang:monitor(process, P)
    in test.erl line 36
  90: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 157
  91: P.2: #Ref<0.0.0.567> = erlang:monitor(process, P.1.1)
    in gen.erl line 200
  92: P.2: {'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 211
  93: Message ({'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}}) from P.2 reaches P.1.1
  94: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.0.0.567>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 360
  95: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  96: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  97: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  98: P.1.1: #Ref<0.0.0.583> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  99: P.1.1: {#Ref<0.0.0.567>,true} = P.2 ! {#Ref<0.0.0.567>,true}
    in gen_server.erl line 219
 100: Message ({#Ref<0.0.0.567>,true}) from P.1.1 reaches P.2
 101: P.2: receives message ({#Ref<0.0.0.567>,true})
    in gen.erl line 213
 102: P.2: true = erlang:demonitor(#Ref<0.0.0.567>, [flush])
    in gen.erl line 215
 103: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 38
 104: Message ({P.2,ok}) from P.2 reaches P
 105: P: receives message ({P.2,ok})
    in test.erl line 43
 106: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 157
 107: P: #Ref<0.0.0.604> = erlang:monitor(process, P.1.1)
    in gen.erl line 200
 108: P: {'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 211
 109: Message ({'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}}) from P reaches P.1.1
 110: P.1.1: receives message ({'$gen_call',{P,#Ref<0.0.0.604>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 360
 111: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
 112: P.1.1: {#Ref<0.0.0.604>,{P.2,the_value}} = P ! {#Ref<0.0.0.604>,{P.2,the_value}}
    in gen_server.erl line 219
 113: Message ({#Ref<0.0.0.604>,{P.2,the_value}}) from P.1.1 reaches P
 114: P: receives message ({#Ref<0.0.0.604>,{P.2,the_value}})
    in gen.erl line 213
 115: P: true = erlang:demonitor(#Ref<0.0.0.604>, [flush])
    in gen.erl line 215
 116: P: true = erlang:exit(P.2, kill)
    in test.erl line 45
 117: Exit signal (kill) from P reaches P.2
 118: P.2: exits abnormally (killed)
 119: P.2: {'DOWN',#Ref<0.0.0.559>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.0.0.559>,process,P.2,killed})
    (while exiting)
 120: P.2: {'DOWN',#Ref<0.0.0.583>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.0.0.583>,process,P.2,killed})
    (while exiting)
 121: Message ({'DOWN',#Ref<0.0.0.559>,process,P.2,killed}) from P.2 reaches P
 122: Message ({'DOWN',#Ref<0.0.0.583>,process,P.2,killed}) from P.2 reaches P.1.1
 123: P: receives message ({'DOWN',#Ref<0.0.0.559>,process,P.2,killed})
    in test.erl line 46
 124: P: exits normally
 125: P: true = erlang:exit(P.1, normal)
    (while exiting)
 126: P: {'DOWN',#Ref<0.0.0.562>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.0.562>,process,P,normal})
    (while exiting)
 127: Exit signal (normal) from P reaches P.1
 128: Message ({'DOWN',#Ref<0.0.0.562>,process,P,normal}) from P reaches P.2
 129: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 360
 130: P.1: #Ref<0.0.0.658> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 934
 131: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 935
 132: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 133: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 910
 134: Exit signal (shutdown) from P.1 reaches P.1.4
 135: P.1.1: receives message ({'DOWN',#Ref<0.0.0.583>,process,P.2,killed})
    in gen_server.erl line 360
 136: P.1.4: exits abnormally (shutdown)
 137: P.1.4: {'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown})
    (while exiting)
 138: Message ({'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown}) from P.1.4 reaches P.1
 139: P.1: receives message ({'DOWN',#Ref<0.0.0.658>,process,P.1.4,shutdown})
    in supervisor.erl line 911
 140: P.1: #Ref<0.0.0.693> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 934
 141: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 935
 142: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 143: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 910
 144: Exit signal (shutdown) from P.1 reaches P.1.3
 145: P.1.3: exits abnormally (shutdown)
 146: P.1.3: {'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown})
    (while exiting)
 147: Message ({'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown}) from P.1.3 reaches P.1
 148: P.1: receives message ({'DOWN',#Ref<0.0.0.693>,process,P.1.3,shutdown})
    in supervisor.erl line 911
 149: P.1: #Ref<0.0.0.714> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 934
 150: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 935
 151: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 152: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 910
 153: Exit signal (shutdown) from P.1 reaches P.1.2
 154: P.1.2: exits abnormally (shutdown)
 155: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 156: P.1.2: {'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown})
    (while exiting)
 157: Message ({'ETS-TRANSFER',249880,P.1.2,[]}) from P.1.2 reaches P.1
 158: Message ({'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown}) from P.1.2 reaches P.1
 159: P.1: receives message ({'DOWN',#Ref<0.0.0.714>,process,P.1.2,shutdown})
    in supervisor.erl line 911
 160: P.1: #Ref<0.0.0.740> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 934
 161: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 935
 162: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 937
 163: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 910
 164: Exit signal (shutdown) from P.1 reaches P.1.1
 165: P.1.1: exits abnormally (shutdown)
 166: P.1.1: {'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown})
    (while exiting)
 167: Message ({'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown}) from P.1.1 reaches P.1
 168: P.1: receives message ({'DOWN',#Ref<0.0.0.740>,process,P.1.1,shutdown})
    in supervisor.erl line 911
 169: P.1: exits normally
 170: P.1: true = ets:delete(gproc)
    (while exiting)
 171: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 172: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 173: P.1: true = erlang:exit(P, normal)
    (while exiting)
 174: Exit signal (normal) from P.1 reaches P
################################################################################
Concuerror Warnings:
--------------------------------------------------------------------------------
Some abnormal exit reasons were treated as normal (--treat_as_normal).
################################################################################
Concuerror Tips:
--------------------------------------------------------------------------------
An abnormal exit signal was sent to a process. This is probably the worst thing that can happen race-wise, as any other side-effecting operation races with the arrival of the signal. If the test produces too many interleavings consider refactoring your code.
################################################################################
Concuerror Info:
--------------------------------------------------------------------------------
Instrumented: test
Instrumented: io_lib
Instrumented: gproc_sup
Instrumented: supervisor
Instrumented: gen_server
Instrumented: gen
Instrumented: proc_lib
Instrumented: erlang
Instrumented: init
Instrumented: sys
Instrumented: application
Instrumented: application_controller
Instrumented: lists
Instrumented: gproc
Instrumented: gproc_lib
Instrumented: error_logger
Instrumented: gen_event
Instrumented: gproc_monitor
Instrumented: gproc_bcast
Instrumented: gproc_pool
################################################################################
Concuerror Race Pairs (turn off with: --show_races false):
--------------------------------------------------------------------------------
You can disable race pair messages with --show_races false
* <0.88.0>: true = ets:delete(gproc, {<0.102.0>,l})
    in gproc.erl line 2373
   is in race with
  Exit signal (shutdown) from <0.73.0> reaches <0.88.0>
* <0.88.0>: 1 = ets:select_delete(gproc, [{{{<0.102.0>,...},'_'},[],[...]}])
    in gproc.erl line 2372
   is in race with
  Exit signal (shutdown) from <0.73.0> reaches <0.88.0>
* <0.88.0>: true = ets:delete(gproc, {{n,l,foo},n})
    in gproc.erl line 2325
   is in race with
  Exit signal (shutdown) from <0.73.0> reaches <0.88.0>
* <0.88.0>: [{{{n,...},n},<0.102.0>,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2323
   is in race with
  Exit signal (shutdown) from <0.73.0> reaches <0.88.0>
* <0.88.0>: [{{n,l,...},[]}] = ets:select(gproc, [{{{<0.102.0>,...},'$2'},[{...}],[...]}])
    in gproc.erl line 2317
   is in race with
  Exit signal (shutdown) from <0.73.0> reaches <0.88.0>
* <0.88.0>: true = ets:member(gproc, {<0.102.0>,l})
    in gproc.erl line 2313
   is in race with
  Exit signal (shutdown) from <0.73.0> reaches <0.88.0>
################################################################################
Done! (Exit status: completed)
  Summary: 7 errors, 7/7 interleavings explored
