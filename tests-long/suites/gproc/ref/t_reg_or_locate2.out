################################################################################

Concuerror started with options:
  [{after_timeout,1000},
   {assume_racing,false},
   {depth_bound,5000},
   {entry_point,{test,t_reg_or_locate2,[]}},
   {files,["../test.erl"]},
   {ignore_error,[deadlock]},
   {instant_delivery,false},
   {interleaving_bound,infinity},
   {keep_going,true},
   {non_racing_system,[]},
   {optimal,true},
   {print_depth,20},
   {scheduling,round_robin},
   {scheduling_bound,infinity},
   {scheduling_bound_type,none},
   {show_races,false},
   {strict_scheduling,false},
   {symbolic_names,true},
   {timeout,infinity},
   {treat_as_normal,[shutdown]}]
################################################################################

Erroneous interleaving 1:
* At step 102 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 298
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2673
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 235
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 301
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 273
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 298
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2673
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 235
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 301
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 378
  24: Message ({ack,P.1.1,{ok,P.1.1}}) from P.1.1 reaches P.1
  25: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 334
  26: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  27: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  28: P.1: undefined = ets:info(gproc_monitor, owner)
  29: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  30: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  31: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 93
  32: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  33: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  34: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 235
  35: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  36: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  37: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 378
  38: Message ({ack,P.1.2,{ok,P.1.2}}) from P.1.2 reaches P.1
  39: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 334
  40: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  41: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  42: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  43: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 298
  44: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  45: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2673
  46: Message ({'ETS-TRANSFER',114713,P.1,[]}) from P.1 reaches P.1.2
  47: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  48: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  49: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 235
  50: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 301
  51: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 378
  52: Message ({ack,P.1.3,{ok,P.1.3}}) from P.1.3 reaches P.1
  53: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 334
  54: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  55: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  56: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 298
  57: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  58: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2673
  59: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  60: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  61: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 235
  62: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 301
  63: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 378
  64: Message ({ack,P.1.4,{ok,P.1.4}}) from P.1.4 reaches P.1
  65: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 334
  66: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  67: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  68: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
  69: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  70: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  71: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
  72: P: {P.2,#Ref<0.0.1.546>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2539
  73: P.2: #Ref<0.0.1.549> = erlang:monitor(process, P)
    in test.erl line 36
  74: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  75: P.2: #Ref<0.0.1.554> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  76: P.2: {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 166
  77: Message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}) from P.2 reaches P.1.1
  78: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 382
  79: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  80: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  81: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  82: P.1.1: #Ref<0.0.1.570> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  83: P.1.1: {#Ref<0.0.1.554>,true} = P.2 ! {#Ref<0.0.1.554>,true}
    in gen_server.erl line 241
  84: Message ({#Ref<0.0.1.554>,true}) from P.1.1 reaches P.2
  85: P.2: receives message ({#Ref<0.0.1.554>,true})
    in gen.erl line 168
  86: P.2: true = erlang:demonitor(#Ref<0.0.1.554>, [flush])
    in gen.erl line 170
  87: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 38
  88: Message ({P.2,ok}) from P.2 reaches P
  89: P: receives message ({P.2,ok})
    in test.erl line 43
  90: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  91: P: #Ref<0.0.1.591> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  92: P: {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 166
  93: Message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}) from P reaches P.1.1
  94: P.1.1: receives message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 382
  95: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  96: P.1.1: {#Ref<0.0.1.591>,{P.2,the_value}} = P ! {#Ref<0.0.1.591>,{P.2,the_value}}
    in gen_server.erl line 241
  97: Message ({#Ref<0.0.1.591>,{P.2,the_value}}) from P.1.1 reaches P
  98: P: receives message ({#Ref<0.0.1.591>,{P.2,the_value}})
    in gen.erl line 168
  99: P: true = erlang:demonitor(#Ref<0.0.1.591>, [flush])
    in gen.erl line 170
 100: P: true = erlang:exit(P.2, kill)
    in test.erl line 45
 101: Exit signal (kill) from P reaches P.2
 102: P.2: exits abnormally (killed)
 103: P.2: {'DOWN',#Ref<0.0.1.546>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    (while exiting)
 104: P.2: {'DOWN',#Ref<0.0.1.570>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.0.1.570>,process,P.2,killed})
    (while exiting)
 105: Message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed}) from P.2 reaches P
 106: Message ({'DOWN',#Ref<0.0.1.570>,process,P.2,killed}) from P.2 reaches P.1.1
 107: P: receives message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    in test.erl line 46
 108: P: exits normally
 109: P: true = erlang:exit(P.1, normal)
    (while exiting)
 110: P: {'DOWN',#Ref<0.0.1.549>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.1.549>,process,P,normal})
    (while exiting)
 111: Exit signal (normal) from P reaches P.1
 112: Message ({'DOWN',#Ref<0.0.1.549>,process,P,normal}) from P reaches P.2
 113: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 382
 114: P.1: #Ref<0.0.1.645> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 968
 115: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 969
 116: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 117: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 944
 118: Exit signal (shutdown) from P.1 reaches P.1.4
 119: P.1.1: receives message ({'DOWN',#Ref<0.0.1.570>,process,P.2,killed})
    in gen_server.erl line 382
 120: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 121: P.1.1: [{{n,l,foo},[]}] = ets:select(gproc, [{{{P.2,'$1'},'$2'},[{'==',{element,2,'$1'},l}],[{{'$1','$2'}}]}])
    in gproc.erl line 2317
 122: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2323
 123: P.1.1: true = ets:delete(gproc, {{n,l,foo},n})
    in gproc.erl line 2325
 124: P.1.1: 1 = ets:select_delete(gproc, [{{{P.2,{'_',l,'_'}},'_'},[],[true]}])
    in gproc.erl line 2372
 125: P.1.1: true = ets:delete(gproc, {P.2,l})
    in gproc.erl line 2373
 126: P.1.4: exits abnormally (shutdown)
 127: P.1.4: {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    (while exiting)
 128: Message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown}) from P.1.4 reaches P.1
 129: P.1: receives message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    in supervisor.erl line 945
 130: P.1: #Ref<0.0.1.680> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 968
 131: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 969
 132: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 133: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 944
 134: Exit signal (shutdown) from P.1 reaches P.1.3
 135: P.1.3: exits abnormally (shutdown)
 136: P.1.3: {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    (while exiting)
 137: Message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown}) from P.1.3 reaches P.1
 138: P.1: receives message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    in supervisor.erl line 945
 139: P.1: #Ref<0.0.1.701> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 968
 140: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 969
 141: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 142: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 944
 143: Exit signal (shutdown) from P.1 reaches P.1.2
 144: P.1.2: exits abnormally (shutdown)
 145: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 146: P.1.2: {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    (while exiting)
 147: Message ({'ETS-TRANSFER',114713,P.1.2,[]}) from P.1.2 reaches P.1
 148: Message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown}) from P.1.2 reaches P.1
 149: P.1: receives message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    in supervisor.erl line 945
 150: P.1: #Ref<0.0.1.727> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 968
 151: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 969
 152: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 153: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 944
 154: Exit signal (shutdown) from P.1 reaches P.1.1
 155: P.1.1: exits abnormally (shutdown)
 156: P.1.1: {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    (while exiting)
 157: Message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown}) from P.1.1 reaches P.1
 158: P.1: receives message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    in supervisor.erl line 945
 159: P.1: exits normally
 160: P.1: true = ets:delete(gproc)
    (while exiting)
 161: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 162: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 163: P.1: true = erlang:exit(P, normal)
    (while exiting)
 164: Exit signal (normal) from P.1 reaches P
################################################################################

Erroneous interleaving 2:
* At step 102 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 298
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2673
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 235
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 301
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 273
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 298
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2673
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 235
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 301
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 378
  24: Message ({ack,P.1.1,{ok,P.1.1}}) from P.1.1 reaches P.1
  25: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 334
  26: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  27: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  28: P.1: undefined = ets:info(gproc_monitor, owner)
  29: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  30: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  31: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 93
  32: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  33: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  34: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 235
  35: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  36: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  37: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 378
  38: Message ({ack,P.1.2,{ok,P.1.2}}) from P.1.2 reaches P.1
  39: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 334
  40: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  41: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  42: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  43: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 298
  44: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  45: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2673
  46: Message ({'ETS-TRANSFER',114713,P.1,[]}) from P.1 reaches P.1.2
  47: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  48: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  49: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 235
  50: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 301
  51: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 378
  52: Message ({ack,P.1.3,{ok,P.1.3}}) from P.1.3 reaches P.1
  53: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 334
  54: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  55: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  56: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 298
  57: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  58: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2673
  59: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  60: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  61: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 235
  62: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 301
  63: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 378
  64: Message ({ack,P.1.4,{ok,P.1.4}}) from P.1.4 reaches P.1
  65: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 334
  66: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  67: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  68: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
  69: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  70: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  71: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
  72: P: {P.2,#Ref<0.0.1.546>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2539
  73: P.2: #Ref<0.0.1.549> = erlang:monitor(process, P)
    in test.erl line 36
  74: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  75: P.2: #Ref<0.0.1.554> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  76: P.2: {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 166
  77: Message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}) from P.2 reaches P.1.1
  78: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 382
  79: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  80: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  81: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  82: P.1.1: #Ref<0.0.1.570> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  83: P.1.1: {#Ref<0.0.1.554>,true} = P.2 ! {#Ref<0.0.1.554>,true}
    in gen_server.erl line 241
  84: Message ({#Ref<0.0.1.554>,true}) from P.1.1 reaches P.2
  85: P.2: receives message ({#Ref<0.0.1.554>,true})
    in gen.erl line 168
  86: P.2: true = erlang:demonitor(#Ref<0.0.1.554>, [flush])
    in gen.erl line 170
  87: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 38
  88: Message ({P.2,ok}) from P.2 reaches P
  89: P: receives message ({P.2,ok})
    in test.erl line 43
  90: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  91: P: #Ref<0.0.1.591> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  92: P: {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 166
  93: Message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}) from P reaches P.1.1
  94: P.1.1: receives message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 382
  95: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  96: P.1.1: {#Ref<0.0.1.591>,{P.2,the_value}} = P ! {#Ref<0.0.1.591>,{P.2,the_value}}
    in gen_server.erl line 241
  97: Message ({#Ref<0.0.1.591>,{P.2,the_value}}) from P.1.1 reaches P
  98: P: receives message ({#Ref<0.0.1.591>,{P.2,the_value}})
    in gen.erl line 168
  99: P: true = erlang:demonitor(#Ref<0.0.1.591>, [flush])
    in gen.erl line 170
 100: P: true = erlang:exit(P.2, kill)
    in test.erl line 45
 101: Exit signal (kill) from P reaches P.2
 102: P.2: exits abnormally (killed)
 103: P.2: {'DOWN',#Ref<0.0.1.546>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    (while exiting)
 104: P.2: {'DOWN',#Ref<0.0.1.570>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.0.1.570>,process,P.2,killed})
    (while exiting)
 105: Message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed}) from P.2 reaches P
 106: Message ({'DOWN',#Ref<0.0.1.570>,process,P.2,killed}) from P.2 reaches P.1.1
 107: P: receives message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    in test.erl line 46
 108: P: exits normally
 109: P: true = erlang:exit(P.1, normal)
    (while exiting)
 110: P: {'DOWN',#Ref<0.0.1.549>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.1.549>,process,P,normal})
    (while exiting)
 111: Exit signal (normal) from P reaches P.1
 112: Message ({'DOWN',#Ref<0.0.1.549>,process,P,normal}) from P reaches P.2
 113: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 382
 114: P.1: #Ref<0.0.1.645> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 968
 115: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 969
 116: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 117: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 944
 118: Exit signal (shutdown) from P.1 reaches P.1.4
 119: P.1.1: receives message ({'DOWN',#Ref<0.0.1.570>,process,P.2,killed})
    in gen_server.erl line 382
 120: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 121: P.1.1: [{{n,l,foo},[]}] = ets:select(gproc, [{{{P.2,'$1'},'$2'},[{'==',{element,2,'$1'},l}],[{{'$1','$2'}}]}])
    in gproc.erl line 2317
 122: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2323
 123: P.1.1: true = ets:delete(gproc, {{n,l,foo},n})
    in gproc.erl line 2325
 124: P.1.1: 1 = ets:select_delete(gproc, [{{{P.2,{'_',l,'_'}},'_'},[],[true]}])
    in gproc.erl line 2372
 125: P.1.4: exits abnormally (shutdown)
 126: P.1.4: {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    (while exiting)
 127: Message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown}) from P.1.4 reaches P.1
 128: P.1: receives message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    in supervisor.erl line 945
 129: P.1: #Ref<0.0.1.680> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 968
 130: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 969
 131: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 132: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 944
 133: Exit signal (shutdown) from P.1 reaches P.1.3
 134: P.1.3: exits abnormally (shutdown)
 135: P.1.3: {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    (while exiting)
 136: Message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown}) from P.1.3 reaches P.1
 137: P.1: receives message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    in supervisor.erl line 945
 138: P.1: #Ref<0.0.1.701> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 968
 139: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 969
 140: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 141: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 944
 142: Exit signal (shutdown) from P.1 reaches P.1.2
 143: P.1.2: exits abnormally (shutdown)
 144: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 145: P.1.2: {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    (while exiting)
 146: Message ({'ETS-TRANSFER',114713,P.1.2,[]}) from P.1.2 reaches P.1
 147: Message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown}) from P.1.2 reaches P.1
 148: P.1: receives message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    in supervisor.erl line 945
 149: P.1: #Ref<0.0.1.727> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 968
 150: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 969
 151: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 152: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 944
 153: Exit signal (shutdown) from P.1 reaches P.1.1
 154: P.1.1: exits abnormally (shutdown)
 155: P.1.1: {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    (while exiting)
 156: Message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown}) from P.1.1 reaches P.1
 157: P.1: receives message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    in supervisor.erl line 945
 158: P.1: exits normally
 159: P.1: true = ets:delete(gproc)
    (while exiting)
 160: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 161: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 162: P.1: true = erlang:exit(P, normal)
    (while exiting)
 163: Exit signal (normal) from P.1 reaches P
################################################################################

Erroneous interleaving 3:
* At step 102 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 298
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2673
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 235
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 301
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 273
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 298
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2673
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 235
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 301
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 378
  24: Message ({ack,P.1.1,{ok,P.1.1}}) from P.1.1 reaches P.1
  25: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 334
  26: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  27: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  28: P.1: undefined = ets:info(gproc_monitor, owner)
  29: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  30: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  31: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 93
  32: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  33: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  34: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 235
  35: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  36: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  37: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 378
  38: Message ({ack,P.1.2,{ok,P.1.2}}) from P.1.2 reaches P.1
  39: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 334
  40: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  41: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  42: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  43: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 298
  44: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  45: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2673
  46: Message ({'ETS-TRANSFER',114713,P.1,[]}) from P.1 reaches P.1.2
  47: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  48: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  49: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 235
  50: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 301
  51: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 378
  52: Message ({ack,P.1.3,{ok,P.1.3}}) from P.1.3 reaches P.1
  53: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 334
  54: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  55: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  56: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 298
  57: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  58: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2673
  59: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  60: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  61: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 235
  62: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 301
  63: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 378
  64: Message ({ack,P.1.4,{ok,P.1.4}}) from P.1.4 reaches P.1
  65: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 334
  66: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  67: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  68: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
  69: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  70: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  71: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
  72: P: {P.2,#Ref<0.0.1.546>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2539
  73: P.2: #Ref<0.0.1.549> = erlang:monitor(process, P)
    in test.erl line 36
  74: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  75: P.2: #Ref<0.0.1.554> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  76: P.2: {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 166
  77: Message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}) from P.2 reaches P.1.1
  78: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 382
  79: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  80: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  81: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  82: P.1.1: #Ref<0.0.1.570> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  83: P.1.1: {#Ref<0.0.1.554>,true} = P.2 ! {#Ref<0.0.1.554>,true}
    in gen_server.erl line 241
  84: Message ({#Ref<0.0.1.554>,true}) from P.1.1 reaches P.2
  85: P.2: receives message ({#Ref<0.0.1.554>,true})
    in gen.erl line 168
  86: P.2: true = erlang:demonitor(#Ref<0.0.1.554>, [flush])
    in gen.erl line 170
  87: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 38
  88: Message ({P.2,ok}) from P.2 reaches P
  89: P: receives message ({P.2,ok})
    in test.erl line 43
  90: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  91: P: #Ref<0.0.1.591> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  92: P: {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 166
  93: Message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}) from P reaches P.1.1
  94: P.1.1: receives message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 382
  95: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  96: P.1.1: {#Ref<0.0.1.591>,{P.2,the_value}} = P ! {#Ref<0.0.1.591>,{P.2,the_value}}
    in gen_server.erl line 241
  97: Message ({#Ref<0.0.1.591>,{P.2,the_value}}) from P.1.1 reaches P
  98: P: receives message ({#Ref<0.0.1.591>,{P.2,the_value}})
    in gen.erl line 168
  99: P: true = erlang:demonitor(#Ref<0.0.1.591>, [flush])
    in gen.erl line 170
 100: P: true = erlang:exit(P.2, kill)
    in test.erl line 45
 101: Exit signal (kill) from P reaches P.2
 102: P.2: exits abnormally (killed)
 103: P.2: {'DOWN',#Ref<0.0.1.546>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    (while exiting)
 104: P.2: {'DOWN',#Ref<0.0.1.570>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.0.1.570>,process,P.2,killed})
    (while exiting)
 105: Message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed}) from P.2 reaches P
 106: Message ({'DOWN',#Ref<0.0.1.570>,process,P.2,killed}) from P.2 reaches P.1.1
 107: P: receives message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    in test.erl line 46
 108: P: exits normally
 109: P: true = erlang:exit(P.1, normal)
    (while exiting)
 110: P: {'DOWN',#Ref<0.0.1.549>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.1.549>,process,P,normal})
    (while exiting)
 111: Exit signal (normal) from P reaches P.1
 112: Message ({'DOWN',#Ref<0.0.1.549>,process,P,normal}) from P reaches P.2
 113: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 382
 114: P.1: #Ref<0.0.1.645> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 968
 115: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 969
 116: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 117: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 944
 118: Exit signal (shutdown) from P.1 reaches P.1.4
 119: P.1.1: receives message ({'DOWN',#Ref<0.0.1.570>,process,P.2,killed})
    in gen_server.erl line 382
 120: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 121: P.1.1: [{{n,l,foo},[]}] = ets:select(gproc, [{{{P.2,'$1'},'$2'},[{'==',{element,2,'$1'},l}],[{{'$1','$2'}}]}])
    in gproc.erl line 2317
 122: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2323
 123: P.1.1: true = ets:delete(gproc, {{n,l,foo},n})
    in gproc.erl line 2325
 124: P.1.4: exits abnormally (shutdown)
 125: P.1.4: {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    (while exiting)
 126: Message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown}) from P.1.4 reaches P.1
 127: P.1: receives message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    in supervisor.erl line 945
 128: P.1: #Ref<0.0.1.680> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 968
 129: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 969
 130: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 131: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 944
 132: Exit signal (shutdown) from P.1 reaches P.1.3
 133: P.1.3: exits abnormally (shutdown)
 134: P.1.3: {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    (while exiting)
 135: Message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown}) from P.1.3 reaches P.1
 136: P.1: receives message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    in supervisor.erl line 945
 137: P.1: #Ref<0.0.1.701> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 968
 138: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 969
 139: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 140: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 944
 141: Exit signal (shutdown) from P.1 reaches P.1.2
 142: P.1.2: exits abnormally (shutdown)
 143: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 144: P.1.2: {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    (while exiting)
 145: Message ({'ETS-TRANSFER',114713,P.1.2,[]}) from P.1.2 reaches P.1
 146: Message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown}) from P.1.2 reaches P.1
 147: P.1: receives message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    in supervisor.erl line 945
 148: P.1: #Ref<0.0.1.727> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 968
 149: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 969
 150: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 151: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 944
 152: Exit signal (shutdown) from P.1 reaches P.1.1
 153: P.1.1: exits abnormally (shutdown)
 154: P.1.1: {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    (while exiting)
 155: Message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown}) from P.1.1 reaches P.1
 156: P.1: receives message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    in supervisor.erl line 945
 157: P.1: exits normally
 158: P.1: true = ets:delete(gproc)
    (while exiting)
 159: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 160: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 161: P.1: true = erlang:exit(P, normal)
    (while exiting)
 162: Exit signal (normal) from P.1 reaches P
################################################################################

Erroneous interleaving 4:
* At step 102 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 298
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2673
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 235
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 301
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 273
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 298
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2673
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 235
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 301
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 378
  24: Message ({ack,P.1.1,{ok,P.1.1}}) from P.1.1 reaches P.1
  25: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 334
  26: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  27: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  28: P.1: undefined = ets:info(gproc_monitor, owner)
  29: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  30: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  31: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 93
  32: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  33: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  34: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 235
  35: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  36: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  37: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 378
  38: Message ({ack,P.1.2,{ok,P.1.2}}) from P.1.2 reaches P.1
  39: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 334
  40: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  41: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  42: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  43: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 298
  44: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  45: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2673
  46: Message ({'ETS-TRANSFER',114713,P.1,[]}) from P.1 reaches P.1.2
  47: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  48: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  49: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 235
  50: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 301
  51: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 378
  52: Message ({ack,P.1.3,{ok,P.1.3}}) from P.1.3 reaches P.1
  53: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 334
  54: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  55: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  56: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 298
  57: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  58: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2673
  59: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  60: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  61: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 235
  62: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 301
  63: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 378
  64: Message ({ack,P.1.4,{ok,P.1.4}}) from P.1.4 reaches P.1
  65: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 334
  66: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  67: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  68: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
  69: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  70: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  71: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
  72: P: {P.2,#Ref<0.0.1.546>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2539
  73: P.2: #Ref<0.0.1.549> = erlang:monitor(process, P)
    in test.erl line 36
  74: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  75: P.2: #Ref<0.0.1.554> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  76: P.2: {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 166
  77: Message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}) from P.2 reaches P.1.1
  78: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 382
  79: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  80: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  81: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  82: P.1.1: #Ref<0.0.1.570> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  83: P.1.1: {#Ref<0.0.1.554>,true} = P.2 ! {#Ref<0.0.1.554>,true}
    in gen_server.erl line 241
  84: Message ({#Ref<0.0.1.554>,true}) from P.1.1 reaches P.2
  85: P.2: receives message ({#Ref<0.0.1.554>,true})
    in gen.erl line 168
  86: P.2: true = erlang:demonitor(#Ref<0.0.1.554>, [flush])
    in gen.erl line 170
  87: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 38
  88: Message ({P.2,ok}) from P.2 reaches P
  89: P: receives message ({P.2,ok})
    in test.erl line 43
  90: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  91: P: #Ref<0.0.1.591> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  92: P: {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 166
  93: Message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}) from P reaches P.1.1
  94: P.1.1: receives message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 382
  95: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  96: P.1.1: {#Ref<0.0.1.591>,{P.2,the_value}} = P ! {#Ref<0.0.1.591>,{P.2,the_value}}
    in gen_server.erl line 241
  97: Message ({#Ref<0.0.1.591>,{P.2,the_value}}) from P.1.1 reaches P
  98: P: receives message ({#Ref<0.0.1.591>,{P.2,the_value}})
    in gen.erl line 168
  99: P: true = erlang:demonitor(#Ref<0.0.1.591>, [flush])
    in gen.erl line 170
 100: P: true = erlang:exit(P.2, kill)
    in test.erl line 45
 101: Exit signal (kill) from P reaches P.2
 102: P.2: exits abnormally (killed)
 103: P.2: {'DOWN',#Ref<0.0.1.546>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    (while exiting)
 104: P.2: {'DOWN',#Ref<0.0.1.570>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.0.1.570>,process,P.2,killed})
    (while exiting)
 105: Message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed}) from P.2 reaches P
 106: Message ({'DOWN',#Ref<0.0.1.570>,process,P.2,killed}) from P.2 reaches P.1.1
 107: P: receives message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    in test.erl line 46
 108: P: exits normally
 109: P: true = erlang:exit(P.1, normal)
    (while exiting)
 110: P: {'DOWN',#Ref<0.0.1.549>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.1.549>,process,P,normal})
    (while exiting)
 111: Exit signal (normal) from P reaches P.1
 112: Message ({'DOWN',#Ref<0.0.1.549>,process,P,normal}) from P reaches P.2
 113: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 382
 114: P.1: #Ref<0.0.1.645> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 968
 115: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 969
 116: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 117: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 944
 118: Exit signal (shutdown) from P.1 reaches P.1.4
 119: P.1.1: receives message ({'DOWN',#Ref<0.0.1.570>,process,P.2,killed})
    in gen_server.erl line 382
 120: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 121: P.1.1: [{{n,l,foo},[]}] = ets:select(gproc, [{{{P.2,'$1'},'$2'},[{'==',{element,2,'$1'},l}],[{{'$1','$2'}}]}])
    in gproc.erl line 2317
 122: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2323
 123: P.1.4: exits abnormally (shutdown)
 124: P.1.4: {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    (while exiting)
 125: Message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown}) from P.1.4 reaches P.1
 126: P.1: receives message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    in supervisor.erl line 945
 127: P.1: #Ref<0.0.1.680> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 968
 128: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 969
 129: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 130: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 944
 131: Exit signal (shutdown) from P.1 reaches P.1.3
 132: P.1.3: exits abnormally (shutdown)
 133: P.1.3: {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    (while exiting)
 134: Message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown}) from P.1.3 reaches P.1
 135: P.1: receives message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    in supervisor.erl line 945
 136: P.1: #Ref<0.0.1.701> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 968
 137: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 969
 138: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 139: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 944
 140: Exit signal (shutdown) from P.1 reaches P.1.2
 141: P.1.2: exits abnormally (shutdown)
 142: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 143: P.1.2: {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    (while exiting)
 144: Message ({'ETS-TRANSFER',114713,P.1.2,[]}) from P.1.2 reaches P.1
 145: Message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown}) from P.1.2 reaches P.1
 146: P.1: receives message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    in supervisor.erl line 945
 147: P.1: #Ref<0.0.1.727> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 968
 148: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 969
 149: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 150: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 944
 151: Exit signal (shutdown) from P.1 reaches P.1.1
 152: P.1.1: exits abnormally (shutdown)
 153: P.1.1: {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    (while exiting)
 154: Message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown}) from P.1.1 reaches P.1
 155: P.1: receives message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    in supervisor.erl line 945
 156: P.1: exits normally
 157: P.1: true = ets:delete(gproc)
    (while exiting)
 158: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 159: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 160: P.1: true = erlang:exit(P, normal)
    (while exiting)
 161: Exit signal (normal) from P.1 reaches P
################################################################################

Erroneous interleaving 5:
* At step 102 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 298
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2673
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 235
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 301
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 273
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 298
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2673
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 235
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 301
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 378
  24: Message ({ack,P.1.1,{ok,P.1.1}}) from P.1.1 reaches P.1
  25: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 334
  26: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  27: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  28: P.1: undefined = ets:info(gproc_monitor, owner)
  29: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  30: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  31: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 93
  32: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  33: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  34: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 235
  35: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  36: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  37: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 378
  38: Message ({ack,P.1.2,{ok,P.1.2}}) from P.1.2 reaches P.1
  39: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 334
  40: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  41: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  42: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  43: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 298
  44: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  45: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2673
  46: Message ({'ETS-TRANSFER',114713,P.1,[]}) from P.1 reaches P.1.2
  47: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  48: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  49: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 235
  50: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 301
  51: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 378
  52: Message ({ack,P.1.3,{ok,P.1.3}}) from P.1.3 reaches P.1
  53: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 334
  54: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  55: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  56: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 298
  57: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  58: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2673
  59: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  60: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  61: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 235
  62: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 301
  63: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 378
  64: Message ({ack,P.1.4,{ok,P.1.4}}) from P.1.4 reaches P.1
  65: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 334
  66: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  67: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  68: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
  69: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  70: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  71: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
  72: P: {P.2,#Ref<0.0.1.546>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2539
  73: P.2: #Ref<0.0.1.549> = erlang:monitor(process, P)
    in test.erl line 36
  74: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  75: P.2: #Ref<0.0.1.554> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  76: P.2: {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 166
  77: Message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}) from P.2 reaches P.1.1
  78: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 382
  79: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  80: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  81: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  82: P.1.1: #Ref<0.0.1.570> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  83: P.1.1: {#Ref<0.0.1.554>,true} = P.2 ! {#Ref<0.0.1.554>,true}
    in gen_server.erl line 241
  84: Message ({#Ref<0.0.1.554>,true}) from P.1.1 reaches P.2
  85: P.2: receives message ({#Ref<0.0.1.554>,true})
    in gen.erl line 168
  86: P.2: true = erlang:demonitor(#Ref<0.0.1.554>, [flush])
    in gen.erl line 170
  87: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 38
  88: Message ({P.2,ok}) from P.2 reaches P
  89: P: receives message ({P.2,ok})
    in test.erl line 43
  90: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  91: P: #Ref<0.0.1.591> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  92: P: {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 166
  93: Message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}) from P reaches P.1.1
  94: P.1.1: receives message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 382
  95: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  96: P.1.1: {#Ref<0.0.1.591>,{P.2,the_value}} = P ! {#Ref<0.0.1.591>,{P.2,the_value}}
    in gen_server.erl line 241
  97: Message ({#Ref<0.0.1.591>,{P.2,the_value}}) from P.1.1 reaches P
  98: P: receives message ({#Ref<0.0.1.591>,{P.2,the_value}})
    in gen.erl line 168
  99: P: true = erlang:demonitor(#Ref<0.0.1.591>, [flush])
    in gen.erl line 170
 100: P: true = erlang:exit(P.2, kill)
    in test.erl line 45
 101: Exit signal (kill) from P reaches P.2
 102: P.2: exits abnormally (killed)
 103: P.2: {'DOWN',#Ref<0.0.1.546>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    (while exiting)
 104: P.2: {'DOWN',#Ref<0.0.1.570>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.0.1.570>,process,P.2,killed})
    (while exiting)
 105: Message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed}) from P.2 reaches P
 106: Message ({'DOWN',#Ref<0.0.1.570>,process,P.2,killed}) from P.2 reaches P.1.1
 107: P: receives message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    in test.erl line 46
 108: P: exits normally
 109: P: true = erlang:exit(P.1, normal)
    (while exiting)
 110: P: {'DOWN',#Ref<0.0.1.549>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.1.549>,process,P,normal})
    (while exiting)
 111: Exit signal (normal) from P reaches P.1
 112: Message ({'DOWN',#Ref<0.0.1.549>,process,P,normal}) from P reaches P.2
 113: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 382
 114: P.1: #Ref<0.0.1.645> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 968
 115: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 969
 116: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 117: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 944
 118: Exit signal (shutdown) from P.1 reaches P.1.4
 119: P.1.1: receives message ({'DOWN',#Ref<0.0.1.570>,process,P.2,killed})
    in gen_server.erl line 382
 120: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 121: P.1.1: [{{n,l,foo},[]}] = ets:select(gproc, [{{{P.2,'$1'},'$2'},[{'==',{element,2,'$1'},l}],[{{'$1','$2'}}]}])
    in gproc.erl line 2317
 122: P.1.4: exits abnormally (shutdown)
 123: P.1.4: {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    (while exiting)
 124: Message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown}) from P.1.4 reaches P.1
 125: P.1: receives message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    in supervisor.erl line 945
 126: P.1: #Ref<0.0.1.680> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 968
 127: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 969
 128: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 129: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 944
 130: Exit signal (shutdown) from P.1 reaches P.1.3
 131: P.1.3: exits abnormally (shutdown)
 132: P.1.3: {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    (while exiting)
 133: Message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown}) from P.1.3 reaches P.1
 134: P.1: receives message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    in supervisor.erl line 945
 135: P.1: #Ref<0.0.1.701> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 968
 136: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 969
 137: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 138: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 944
 139: Exit signal (shutdown) from P.1 reaches P.1.2
 140: P.1.2: exits abnormally (shutdown)
 141: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 142: P.1.2: {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    (while exiting)
 143: Message ({'ETS-TRANSFER',114713,P.1.2,[]}) from P.1.2 reaches P.1
 144: Message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown}) from P.1.2 reaches P.1
 145: P.1: receives message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    in supervisor.erl line 945
 146: P.1: #Ref<0.0.1.727> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 968
 147: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 969
 148: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 149: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 944
 150: Exit signal (shutdown) from P.1 reaches P.1.1
 151: P.1.1: exits abnormally (shutdown)
 152: P.1.1: {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    (while exiting)
 153: Message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown}) from P.1.1 reaches P.1
 154: P.1: receives message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    in supervisor.erl line 945
 155: P.1: exits normally
 156: P.1: true = ets:delete(gproc)
    (while exiting)
 157: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 158: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 159: P.1: true = erlang:exit(P, normal)
    (while exiting)
 160: Exit signal (normal) from P.1 reaches P
################################################################################

Erroneous interleaving 6:
* At step 102 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 298
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2673
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 235
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 301
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 273
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 298
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2673
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 235
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 301
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 378
  24: Message ({ack,P.1.1,{ok,P.1.1}}) from P.1.1 reaches P.1
  25: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 334
  26: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  27: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  28: P.1: undefined = ets:info(gproc_monitor, owner)
  29: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  30: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  31: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 93
  32: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  33: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  34: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 235
  35: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  36: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  37: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 378
  38: Message ({ack,P.1.2,{ok,P.1.2}}) from P.1.2 reaches P.1
  39: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 334
  40: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  41: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  42: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  43: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 298
  44: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  45: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2673
  46: Message ({'ETS-TRANSFER',114713,P.1,[]}) from P.1 reaches P.1.2
  47: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  48: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  49: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 235
  50: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 301
  51: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 378
  52: Message ({ack,P.1.3,{ok,P.1.3}}) from P.1.3 reaches P.1
  53: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 334
  54: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  55: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  56: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 298
  57: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  58: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2673
  59: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  60: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  61: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 235
  62: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 301
  63: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 378
  64: Message ({ack,P.1.4,{ok,P.1.4}}) from P.1.4 reaches P.1
  65: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 334
  66: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  67: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  68: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
  69: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  70: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  71: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
  72: P: {P.2,#Ref<0.0.1.546>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2539
  73: P.2: #Ref<0.0.1.549> = erlang:monitor(process, P)
    in test.erl line 36
  74: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  75: P.2: #Ref<0.0.1.554> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  76: P.2: {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 166
  77: Message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}) from P.2 reaches P.1.1
  78: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 382
  79: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  80: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  81: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  82: P.1.1: #Ref<0.0.1.570> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  83: P.1.1: {#Ref<0.0.1.554>,true} = P.2 ! {#Ref<0.0.1.554>,true}
    in gen_server.erl line 241
  84: Message ({#Ref<0.0.1.554>,true}) from P.1.1 reaches P.2
  85: P.2: receives message ({#Ref<0.0.1.554>,true})
    in gen.erl line 168
  86: P.2: true = erlang:demonitor(#Ref<0.0.1.554>, [flush])
    in gen.erl line 170
  87: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 38
  88: Message ({P.2,ok}) from P.2 reaches P
  89: P: receives message ({P.2,ok})
    in test.erl line 43
  90: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  91: P: #Ref<0.0.1.591> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  92: P: {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 166
  93: Message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}) from P reaches P.1.1
  94: P.1.1: receives message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 382
  95: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  96: P.1.1: {#Ref<0.0.1.591>,{P.2,the_value}} = P ! {#Ref<0.0.1.591>,{P.2,the_value}}
    in gen_server.erl line 241
  97: Message ({#Ref<0.0.1.591>,{P.2,the_value}}) from P.1.1 reaches P
  98: P: receives message ({#Ref<0.0.1.591>,{P.2,the_value}})
    in gen.erl line 168
  99: P: true = erlang:demonitor(#Ref<0.0.1.591>, [flush])
    in gen.erl line 170
 100: P: true = erlang:exit(P.2, kill)
    in test.erl line 45
 101: Exit signal (kill) from P reaches P.2
 102: P.2: exits abnormally (killed)
 103: P.2: {'DOWN',#Ref<0.0.1.546>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    (while exiting)
 104: P.2: {'DOWN',#Ref<0.0.1.570>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.0.1.570>,process,P.2,killed})
    (while exiting)
 105: Message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed}) from P.2 reaches P
 106: Message ({'DOWN',#Ref<0.0.1.570>,process,P.2,killed}) from P.2 reaches P.1.1
 107: P: receives message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    in test.erl line 46
 108: P: exits normally
 109: P: true = erlang:exit(P.1, normal)
    (while exiting)
 110: P: {'DOWN',#Ref<0.0.1.549>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.1.549>,process,P,normal})
    (while exiting)
 111: Exit signal (normal) from P reaches P.1
 112: Message ({'DOWN',#Ref<0.0.1.549>,process,P,normal}) from P reaches P.2
 113: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 382
 114: P.1: #Ref<0.0.1.645> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 968
 115: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 969
 116: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 117: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 944
 118: Exit signal (shutdown) from P.1 reaches P.1.4
 119: P.1.1: receives message ({'DOWN',#Ref<0.0.1.570>,process,P.2,killed})
    in gen_server.erl line 382
 120: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 121: P.1.4: exits abnormally (shutdown)
 122: P.1.4: {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    (while exiting)
 123: Message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown}) from P.1.4 reaches P.1
 124: P.1: receives message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    in supervisor.erl line 945
 125: P.1: #Ref<0.0.1.680> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 968
 126: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 969
 127: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 128: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 944
 129: Exit signal (shutdown) from P.1 reaches P.1.3
 130: P.1.3: exits abnormally (shutdown)
 131: P.1.3: {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    (while exiting)
 132: Message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown}) from P.1.3 reaches P.1
 133: P.1: receives message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    in supervisor.erl line 945
 134: P.1: #Ref<0.0.1.701> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 968
 135: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 969
 136: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 137: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 944
 138: Exit signal (shutdown) from P.1 reaches P.1.2
 139: P.1.2: exits abnormally (shutdown)
 140: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 141: P.1.2: {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    (while exiting)
 142: Message ({'ETS-TRANSFER',114713,P.1.2,[]}) from P.1.2 reaches P.1
 143: Message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown}) from P.1.2 reaches P.1
 144: P.1: receives message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    in supervisor.erl line 945
 145: P.1: #Ref<0.0.1.727> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 968
 146: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 969
 147: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 148: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 944
 149: Exit signal (shutdown) from P.1 reaches P.1.1
 150: P.1.1: exits abnormally (shutdown)
 151: P.1.1: {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    (while exiting)
 152: Message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown}) from P.1.1 reaches P.1
 153: P.1: receives message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    in supervisor.erl line 945
 154: P.1: exits normally
 155: P.1: true = ets:delete(gproc)
    (while exiting)
 156: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 157: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 158: P.1: true = erlang:exit(P, normal)
    (while exiting)
 159: Exit signal (normal) from P.1 reaches P
################################################################################

Erroneous interleaving 7:
* At step 102 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 298
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2673
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 235
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 301
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 273
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 298
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2673
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 235
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 301
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 378
  24: Message ({ack,P.1.1,{ok,P.1.1}}) from P.1.1 reaches P.1
  25: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 334
  26: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  27: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  28: P.1: undefined = ets:info(gproc_monitor, owner)
  29: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  30: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  31: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 93
  32: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  33: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  34: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 235
  35: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  36: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  37: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 378
  38: Message ({ack,P.1.2,{ok,P.1.2}}) from P.1.2 reaches P.1
  39: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 334
  40: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  41: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  42: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  43: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 298
  44: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  45: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2673
  46: Message ({'ETS-TRANSFER',114713,P.1,[]}) from P.1 reaches P.1.2
  47: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  48: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  49: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 235
  50: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 301
  51: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 378
  52: Message ({ack,P.1.3,{ok,P.1.3}}) from P.1.3 reaches P.1
  53: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 334
  54: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  55: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  56: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 298
  57: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  58: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2673
  59: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  60: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  61: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 235
  62: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 301
  63: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 378
  64: Message ({ack,P.1.4,{ok,P.1.4}}) from P.1.4 reaches P.1
  65: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 334
  66: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  67: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  68: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
  69: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  70: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  71: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
  72: P: {P.2,#Ref<0.0.1.546>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2539
  73: P.2: #Ref<0.0.1.549> = erlang:monitor(process, P)
    in test.erl line 36
  74: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  75: P.2: #Ref<0.0.1.554> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  76: P.2: {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 166
  77: Message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}) from P.2 reaches P.1.1
  78: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 382
  79: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  80: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  81: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  82: P.1.1: #Ref<0.0.1.570> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  83: P.1.1: {#Ref<0.0.1.554>,true} = P.2 ! {#Ref<0.0.1.554>,true}
    in gen_server.erl line 241
  84: Message ({#Ref<0.0.1.554>,true}) from P.1.1 reaches P.2
  85: P.2: receives message ({#Ref<0.0.1.554>,true})
    in gen.erl line 168
  86: P.2: true = erlang:demonitor(#Ref<0.0.1.554>, [flush])
    in gen.erl line 170
  87: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 38
  88: Message ({P.2,ok}) from P.2 reaches P
  89: P: receives message ({P.2,ok})
    in test.erl line 43
  90: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  91: P: #Ref<0.0.1.591> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  92: P: {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 166
  93: Message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}) from P reaches P.1.1
  94: P.1.1: receives message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 382
  95: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  96: P.1.1: {#Ref<0.0.1.591>,{P.2,the_value}} = P ! {#Ref<0.0.1.591>,{P.2,the_value}}
    in gen_server.erl line 241
  97: Message ({#Ref<0.0.1.591>,{P.2,the_value}}) from P.1.1 reaches P
  98: P: receives message ({#Ref<0.0.1.591>,{P.2,the_value}})
    in gen.erl line 168
  99: P: true = erlang:demonitor(#Ref<0.0.1.591>, [flush])
    in gen.erl line 170
 100: P: true = erlang:exit(P.2, kill)
    in test.erl line 45
 101: Exit signal (kill) from P reaches P.2
 102: P.2: exits abnormally (killed)
 103: P.2: {'DOWN',#Ref<0.0.1.546>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    (while exiting)
 104: P.2: {'DOWN',#Ref<0.0.1.570>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.0.1.570>,process,P.2,killed})
    (while exiting)
 105: Message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed}) from P.2 reaches P
 106: Message ({'DOWN',#Ref<0.0.1.570>,process,P.2,killed}) from P.2 reaches P.1.1
 107: P: receives message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    in test.erl line 46
 108: P: exits normally
 109: P: true = erlang:exit(P.1, normal)
    (while exiting)
 110: P: {'DOWN',#Ref<0.0.1.549>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.1.549>,process,P,normal})
    (while exiting)
 111: Exit signal (normal) from P reaches P.1
 112: Message ({'DOWN',#Ref<0.0.1.549>,process,P,normal}) from P reaches P.2
 113: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 382
 114: P.1: #Ref<0.0.1.645> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 968
 115: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 969
 116: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 117: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 944
 118: Exit signal (shutdown) from P.1 reaches P.1.4
 119: P.1.1: receives message ({'DOWN',#Ref<0.0.1.570>,process,P.2,killed})
    in gen_server.erl line 382
 120: P.1.4: exits abnormally (shutdown)
 121: P.1.4: {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    (while exiting)
 122: Message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown}) from P.1.4 reaches P.1
 123: P.1: receives message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    in supervisor.erl line 945
 124: P.1: #Ref<0.0.1.680> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 968
 125: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 969
 126: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 127: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 944
 128: Exit signal (shutdown) from P.1 reaches P.1.3
 129: P.1.3: exits abnormally (shutdown)
 130: P.1.3: {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    (while exiting)
 131: Message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown}) from P.1.3 reaches P.1
 132: P.1: receives message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    in supervisor.erl line 945
 133: P.1: #Ref<0.0.1.701> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 968
 134: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 969
 135: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 136: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 944
 137: Exit signal (shutdown) from P.1 reaches P.1.2
 138: P.1.2: exits abnormally (shutdown)
 139: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 140: P.1.2: {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    (while exiting)
 141: Message ({'ETS-TRANSFER',114713,P.1.2,[]}) from P.1.2 reaches P.1
 142: Message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown}) from P.1.2 reaches P.1
 143: P.1: receives message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    in supervisor.erl line 945
 144: P.1: #Ref<0.0.1.727> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 968
 145: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 969
 146: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 147: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 944
 148: Exit signal (shutdown) from P.1 reaches P.1.1
 149: P.1.1: exits abnormally (shutdown)
 150: P.1.1: {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    (while exiting)
 151: Message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown}) from P.1.1 reaches P.1
 152: P.1: receives message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    in supervisor.erl line 945
 153: P.1: exits normally
 154: P.1: true = ets:delete(gproc)
    (while exiting)
 155: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 156: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 157: P.1: true = erlang:exit(P, normal)
    (while exiting)
 158: Exit signal (normal) from P.1 reaches P
################################################################################

Erroneous interleaving 8:
* At step 102 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------

Interleaving info:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 298
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 678
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2673
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 234
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 235
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 301
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 273
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 298
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2673
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 235
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 301
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 378
  24: Message ({ack,P.1.1,{ok,P.1.1}}) from P.1.1 reaches P.1
  25: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 334
  26: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  27: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  28: P.1: undefined = ets:info(gproc_monitor, owner)
  29: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  30: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  31: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 93
  32: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  33: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  34: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 235
  35: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  36: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  37: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 378
  38: Message ({ack,P.1.2,{ok,P.1.2}}) from P.1.2 reaches P.1
  39: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 334
  40: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  41: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  42: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  43: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 298
  44: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  45: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2673
  46: Message ({'ETS-TRANSFER',114713,P.1,[]}) from P.1 reaches P.1.2
  47: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  48: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  49: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 235
  50: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 301
  51: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 378
  52: Message ({ack,P.1.3,{ok,P.1.3}}) from P.1.3 reaches P.1
  53: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 334
  54: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  55: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  56: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 298
  57: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 678
  58: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2673
  59: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  60: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 234
  61: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 235
  62: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 301
  63: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 378
  64: Message ({ack,P.1.4,{ok,P.1.4}}) from P.1.4 reaches P.1
  65: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 334
  66: P.1: user = erlang:group_leader()
    in error_logger.erl line 211
  67: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 232
  68: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 378
  69: Message ({notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}) from P.1 reaches error_logger
  70: Message ({ack,P.1,{ok,P.1}}) from P.1 reaches P
  71: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 334
  72: P: {P.2,#Ref<0.0.1.546>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2539
  73: P.2: #Ref<0.0.1.549> = erlang:monitor(process, P)
    in test.erl line 36
  74: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  75: P.2: #Ref<0.0.1.554> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  76: P.2: {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 166
  77: Message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}}) from P.2 reaches P.1.1
  78: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.0.1.554>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 382
  79: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  80: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  81: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  82: P.1.1: #Ref<0.0.1.570> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  83: P.1.1: {#Ref<0.0.1.554>,true} = P.2 ! {#Ref<0.0.1.554>,true}
    in gen_server.erl line 241
  84: Message ({#Ref<0.0.1.554>,true}) from P.1.1 reaches P.2
  85: P.2: receives message ({#Ref<0.0.1.554>,true})
    in gen.erl line 168
  86: P.2: true = erlang:demonitor(#Ref<0.0.1.554>, [flush])
    in gen.erl line 170
  87: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 38
  88: Message ({P.2,ok}) from P.2 reaches P
  89: P: receives message ({P.2,ok})
    in test.erl line 43
  90: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 256
  91: P: #Ref<0.0.1.591> = erlang:monitor(process, P.1.1)
    in gen.erl line 155
  92: P: {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 166
  93: Message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}}) from P reaches P.1.1
  94: P.1.1: receives message ({'$gen_call',{P,#Ref<0.0.1.591>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 382
  95: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  96: P.1.1: {#Ref<0.0.1.591>,{P.2,the_value}} = P ! {#Ref<0.0.1.591>,{P.2,the_value}}
    in gen_server.erl line 241
  97: Message ({#Ref<0.0.1.591>,{P.2,the_value}}) from P.1.1 reaches P
  98: P: receives message ({#Ref<0.0.1.591>,{P.2,the_value}})
    in gen.erl line 168
  99: P: true = erlang:demonitor(#Ref<0.0.1.591>, [flush])
    in gen.erl line 170
 100: P: true = erlang:exit(P.2, kill)
    in test.erl line 45
 101: Exit signal (kill) from P reaches P.2
 102: P.2: exits abnormally (killed)
 103: P.2: {'DOWN',#Ref<0.0.1.546>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    (while exiting)
 104: P.2: {'DOWN',#Ref<0.0.1.570>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.0.1.570>,process,P.2,killed})
    (while exiting)
 105: Message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed}) from P.2 reaches P
 106: P: receives message ({'DOWN',#Ref<0.0.1.546>,process,P.2,killed})
    in test.erl line 46
 107: P: exits normally
 108: P: true = erlang:exit(P.1, normal)
    (while exiting)
 109: P: {'DOWN',#Ref<0.0.1.549>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.1.549>,process,P,normal})
    (while exiting)
 110: Exit signal (normal) from P reaches P.1
 111: Message ({'DOWN',#Ref<0.0.1.549>,process,P,normal}) from P reaches P.2
 112: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 382
 113: P.1: #Ref<0.0.1.645> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 968
 114: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 969
 115: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 116: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 944
 117: Exit signal (shutdown) from P.1 reaches P.1.4
 118: P.1.4: exits abnormally (shutdown)
 119: P.1.4: {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    (while exiting)
 120: Message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown}) from P.1.4 reaches P.1
 121: P.1: receives message ({'DOWN',#Ref<0.0.1.645>,process,P.1.4,shutdown})
    in supervisor.erl line 945
 122: P.1: #Ref<0.0.1.680> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 968
 123: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 969
 124: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 125: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 944
 126: Exit signal (shutdown) from P.1 reaches P.1.3
 127: P.1.3: exits abnormally (shutdown)
 128: P.1.3: {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    (while exiting)
 129: Message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown}) from P.1.3 reaches P.1
 130: P.1: receives message ({'DOWN',#Ref<0.0.1.680>,process,P.1.3,shutdown})
    in supervisor.erl line 945
 131: P.1: #Ref<0.0.1.701> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 968
 132: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 969
 133: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 134: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 944
 135: Exit signal (shutdown) from P.1 reaches P.1.2
 136: P.1.2: exits abnormally (shutdown)
 137: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 138: P.1.2: {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    (while exiting)
 139: Message ({'ETS-TRANSFER',114713,P.1.2,[]}) from P.1.2 reaches P.1
 140: Message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown}) from P.1.2 reaches P.1
 141: P.1: receives message ({'DOWN',#Ref<0.0.1.701>,process,P.1.2,shutdown})
    in supervisor.erl line 945
 142: P.1: #Ref<0.0.1.727> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 968
 143: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 969
 144: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 971
 145: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 944
 146: Exit signal (shutdown) from P.1 reaches P.1.1
 147: P.1.1: exits abnormally (shutdown)
 148: P.1.1: {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    (while exiting)
 149: Message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown}) from P.1.1 reaches P.1
 150: Message ({'DOWN',#Ref<0.0.1.570>,process,P.2,killed}) from P.2 reaches P.1.1
 151: P.1: receives message ({'DOWN',#Ref<0.0.1.727>,process,P.1.1,shutdown})
    in supervisor.erl line 945
 152: P.1: exits normally
 153: P.1: true = ets:delete(gproc)
    (while exiting)
 154: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 155: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 156: P.1: true = erlang:exit(P, normal)
    (while exiting)
 157: Exit signal (normal) from P.1 reaches P
################################################################################

Warnings:
--------------------------------------------------------------------------------

Some abnormal exit reasons were treated as normal (--treat_as_normal).
Continuing after error

################################################################################

Tips:
--------------------------------------------------------------------------------

An abnormal exit signal was sent to a process. This is probably the worst thing that can happen race-wise, as any other side-effecting operation races with the arrival of the signal. If the test produces too many interleavings consider refactoring your code.

################################################################################

Info:
--------------------------------------------------------------------------------

Instrumented test
Instrumented io_lib
Instrumented gproc_sup
Instrumented supervisor
Instrumented gen_server
Instrumented gen
Instrumented proc_lib
Instrumented erlang
Instrumented application
Instrumented application_controller
Instrumented lists
Instrumented gproc
Instrumented gproc_lib
Instrumented error_logger
Instrumented gen_event
Instrumented gproc_monitor
Instrumented gproc_bcast
Instrumented gproc_pool
You can see pairs of racing instructions (in the report and --graph) with '--show_races true'

################################################################################

Done! (Exit status: completed)
  Summary: 8 errors, 8/8 interleavings explored
